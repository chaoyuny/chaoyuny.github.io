<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WGCNA分析专栏1-数据准备</title>
      <link href="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/"/>
      <url>/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简要概述"><a href="#1-简要概述" class="headerlink" title="1. 简要概述"></a>1. 简要概述</h2><h3 id="1-1-WGCNA用来做什么"><a href="#1-1-WGCNA用来做什么" class="headerlink" title="1.1 WGCNA用来做什么"></a>1.1 WGCNA用来做什么</h3><p><strong>Weighted Gene Co-Expression Network Analysis</strong>（<strong>WGCNA， 加权基因共表达网络分析</strong>），主要用于鉴定表达模式相似的基因<strong>集合</strong>（module）。解析<strong>基因集合</strong>与<strong>样品表型</strong>之间的联系，绘制<strong>基因集合</strong>中<strong>基因之间</strong>的调控网络并<strong>鉴定关键调控基因</strong>。</p><h3 id="1-2-基本过程"><a href="#1-2-基本过程" class="headerlink" title="1.2 基本过程"></a>1.2 基本过程</h3><p>详细过程请<a href="https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-9-559/figures/1">点击</a>，这是原图链接，追求高清的可以去看看。总结下来，应包含以下几个过程：</p><p>A、构建基因关系网络</p><p>B、构建基因模块</p><p>C、筛选关键模块</p><p>D、鉴定关键基因</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713120432331.png" alt="image-20210713120432331"></p><h2 id="2-数据准备"><a href="#2-数据准备" class="headerlink" title="2. 数据准备"></a>2. 数据准备</h2><p>在WGCNA分析的过程中，我们所用到的文件有两个，其一是基因表达文件，其二是表型文件。</p><p>这这里，基因表达文件我们只能用表达量，不能使用计数矩阵，表达量比如RPKM/FPKM/TPM等均可，也可以用DEseq2标准化后的数据。</p><p>同时，表型文件是我们研究的表型分组数据，比如<strong>数量性状</strong>[<em>又叫<u>连续型变量</u></em>]的产肉量、产奶量、跳高等。或分类变量[<em>又叫<u>离散型变量</u></em>]，这一类数据比如月龄、产犊胎次、蛋壳颜色、药物效果等。</p><h3 id="2-1-基因表达文件的准备"><a href="#2-1-基因表达文件的准备" class="headerlink" title="2.1 基因表达文件的准备"></a>2.1 基因表达文件的准备</h3><p>今天这个部分我用好基友**<a href="https://wsz1207.github.io/">书哲</a>**大神的数据来进行演示。</p><h4 id="2-1-1-安装R语言及Rstudio"><a href="#2-1-1-安装R语言及Rstudio" class="headerlink" title="2.1.1 安装R语言及Rstudio"></a>2.1.1 安装R语言及Rstudio</h4><p>详细的安装方法我就不介绍了，这里给大家提个醒，也是经常出现坑的地方！</p><p>第一：他们两安装的路径不能含有中文路径，出现中文路径估计某天你就会发现它不工作了！！！切记！</p><p>第二：先安装R内核，我一般选择<strong>清华镜像</strong>，<a href="https://cran.r-project.org/mirrors.html">点我安装</a>；安装完成后你再安装Rstudio，选择免费版就好，一般科研工作者足够用了！<a href="https://www.rstudio.com/products/rstudio/">点我安装</a></p><p>本次WGCNA分享我所用的<u><strong>内核+Rstudio</strong></u>版本如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713105657127-1626145018446.png" alt="image-20210713105657127"></p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713105717294-1626145038575.png" alt="image-20210713105717294"></p><h4 id="2-1-2-包的安装"><a href="#2-1-2-包的安装" class="headerlink" title="2.1.2 包的安装"></a>2.1.2 包的安装</h4><p>在安装R包时，会出现各种版本不兼容的问题，为此<a href="http://bioconductor.org/">Bioconductor</a>完美解决了这个问题。首先，我们先安装这个万能的管理包：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">if (!requireNamespace(&quot;BiocManager&quot;, quietly &#x3D; TRUE))    install.packages(&quot;BiocManager&quot;)BiocManager::install() # 里面可以指定对应的版本，如  “version &#x3D; &quot;3.13&quot;”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就可以愉快的安装包了，下面贴上我在使用的包，你们可以酌情安装，在以后使用的时候直接使用以下命令安装即可：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">BiocManager::install(&quot;Packagename&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我所用包：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">BiocManager::install(c(&quot;org.Bt.eg.db&quot;,&quot;DESeq2&quot;,&quot;dplyr&quot;,&quot;RColorBrewer&quot;,                       &quot;genefilter&quot;,&quot;GO.db&quot;,&quot;topGO&quot;,&quot;GSEABase&quot;,                       &quot;clusterProfiler&quot;,&quot;fgsea&quot;,&quot;tidyverse&quot;,&quot;ggpubr&quot;,                       &quot;pheatmap&quot;,&quot;DESeq2&quot;,&quot;gplots&quot;,&quot;GOplot&quot;,&quot;ggplot2&quot;,                       &quot;enrichplot&quot;,&quot;UpSetR&quot;,&quot;VennDiagram&quot;,&quot;openxlsx&quot;,                       &quot;WGCNA&quot;,&quot;gmodels&quot;,&quot;ggcorrplot&quot;,&quot;scatterplot3d&quot;                       ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载某一个包用下面一个命令：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">library(Packagename)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-3-数据导入"><a href="#2-1-3-数据导入" class="headerlink" title="2.1.3 数据导入"></a>2.1.3 数据导入</h4><p>Ok，在上面的准备工作做完了以后，我们开始导入数据。在开始一个项目之前，我个人习惯性进行如下操作：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">rm(list &#x3D; ls()) # 清空环境变量，这个的作用不用我多说吧getwd(); # 获取当前工作路劲workingDir &#x3D; &quot;.&quot; # 设置当前工作路径为“.”,目的是方便我们要陪你过Tab键补齐和切换路径setwd(workingDir)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>加载包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">library(openxlsx)library(WGCNA)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>个人习惯性导入数据前都会用如下代码先指定一下，防止将数据中的<strong>字符串</strong>当做<strong>因子</strong>处理</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">options(stringsAsFactors &#x3D; FALSE)# 不要将字符串当做因子处理<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入数据</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">dat&#x3D;read.xlsx(&quot;..&#x2F;Filename.xlsx&quot;) # 根据自己的喜好选择合适的导入方式，如TXT，tsv，csv格式等dim(dat) # 查看dat的维度head(dat) # 查看dat的前6行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>导入后如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713112239061-1626146561265.png" alt="image-20210713112239061"></p><p>这个实验室1因子2水平3个重复的设计，不懂的自己去翻生物统计的书。</p><h4 id="2-1-4-ID转换"><a href="#2-1-4-ID转换" class="headerlink" title="2.1.4 ID转换"></a>2.1.4 ID转换</h4><p>通常，我们常见的基因ID是gene symbol，即类似CCK /CDH2/P53/IGF1/FN1之类。上述的基因ID看起来是<strong>Ensembl</strong> 注释文件中的命名风格。这里我们转换一下ID。</p><p>加载包</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">library(org.Bt.eg.db) #这是物种牛上的注释包，其他物种的需要下载对应注释包library(GO.db)library(topGO)library(GSEABase)library(clusterProfiler)library(fgsea)library(tidyr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取需要转化的ID并转化为字符串</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">trans_id &lt;- dat$ID symbol&#x3D;as.character(trans_id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转换</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">ids_to_symbol &lt;- bitr(symbol,                      fromType&#x3D;&quot;ENSEMBLTRANS&quot;, # 从ENSEMBLTRANS转化至下面的两种ID                      toType&#x3D;c(&#39;ENTREZID&#39;,&quot;SYMBOL&quot;),                      OrgDb&#x3D;&quot;org.Bt.eg.db&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转换后结果如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713122029415-1626150030953.png" alt="image-20210713122029415"></p><p>提示有13.37%的基因名转换不成功！这个数据如果偏大可能是你的注释包可能弄错了，我这边这么高的原因可能是黄牛属与水牛属的区别。当然，这一步可以去<a href="https://david.ncifcrf.gov/">David网站</a>上进行转化。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713152635218-1626161196621.png" alt="image-20210713152635218"></p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713153027568-1626161428821.png" alt="image-20210713153027568"></p><p>折腾一番后，结果如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713153118631-1626161479986.png" alt="image-20210713153118631"></p><p>两种方法都是2100多个，选其一即可。</p><h4 id="2-1-5-合并转换结果"><a href="#2-1-5-合并转换结果" class="headerlink" title="2.1.5 合并转换结果"></a>2.1.5 合并转换结果</h4><p>直接上代码：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">dat&#x3D;merge(dat,ids_to_symbol,by.x&#x3D;&quot;ID&quot;,by.y&#x3D;&quot;ENSEMBLTRANS&quot;) # 合并两个数据框head(dat)rownames(dat) &lt;- dat$SYMBOL #将SYMBOL命为行名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>合并结果如下图，但是当我们命名的时候出现了以下的的问题：<strong>行名重复！</strong></p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713220357341-1626185038270.png" alt="image-20210713220357341"></p><p>仔细检查了下，原来数据是基于转录本的定量，所以有重复很正常！那么我们就用Ensymbol ID作为行名，这个转化的结果保存起来后面备用！当进行了行名指定后，还是出现了这个行名重复的问题，如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713220801891-1626185284058.png" alt="image-20210713220801891"></p><p>写到这里，我突然想到了我之前做比对和定量的时候，用的是UCSC的参考基因组+注释文件，那里面的转录本都有不同的编号，不会出现这个问题！既然这样，这2100多个基因都是差异转录本，那么我继续去掉重复，然后再命名。</p><p>在去掉重复之前，我们先看看有多少个重复，代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">y&#x3D;as.data.frame(table(dat$ID))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如图：可以看出其实重复的并不是很多，这里有两种办法，一种是手动去重，也就是留下差异加大、表达量高一些的基因，这种需要一个个去检查。这里我为了保证数据更可靠，就直接检查去除。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713221837621.png" alt="image-20210713221837621"></p><p>去除的话直接用数据框的操作方式就行了,但当我准备这样干的时候，问题来了，看图：同一个Ensymbol的ID，又对应了不同的Symbol ID [<strong>我崩溃了！！！</strong>]。其实刚刚我同样用了symbol ID做了一次，发现大小写字母的也算是重复，哥哥我也是崩溃的！比如BoLA,BOLA也算重复！</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713222021459-1626186023179.png" alt="image-20210713222021459"></p><p>那好，既然这么刚，那我们直接去Excel把它搞一下！先保存！</p><pre class="line-numbers language-none"><code class="language-none">write.xlsx(dat,&quot;..&#x2F;Expdat_real.xlsx&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存后的如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713223538790-1626186940303.png" alt="image-20210713223538790"></p><p>打开操作它：先按照symbol<strong>升序</strong>，随后进行<strong>条件格式高亮重复值</strong>，再进行<strong>颜色排序</strong>，效果如下：然后修改就是了</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713223821202-1626187103335.png" alt="image-20210713223821202"></p><p>然后重复的全被我添加了后缀，如图：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713224134067-1626187295630.png" alt="image-20210713224134067"></p><h4 id="2-1-6-表达量适合度检测"><a href="#2-1-6-表达量适合度检测" class="headerlink" title="2.1.6 表达量适合度检测"></a>2.1.6 表达量适合度检测</h4><p>经过上面的处理，我们终于拿到了想要的数据，重新导入，并留下我们想要的数据</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">dat&#x3D;read.xlsx(&quot;..&#x2F;Expdat_real.xlsx&quot;) head(dat)rownames(dat) &lt;- dat$SYMBOL #给行命名colnames(dat) #查看列名all_exp &#x3D; dat[,2:7] # 最后保存只有表达量数据的数据框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步得到的数据格式如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714002259952-1626193381281.png" alt="image-20210714002259952"></p><p>上述我们拿到了一个表达矩阵，包含了约2千个观测值，往往在我们的研究中，可能这里得到的是数以万计的基因，比如我自己弄的就有3万个左右，那么这么多的基因，我们肯定没法全部考虑进去，需要进行一定的处理后保留上千个基因，比如3千，5千，1万啥的，这里就需要有相应的处理方式保留想要用于WGCNA分析的基因。</p><p>基于上述的需求，我们这里引入一个统计量-<strong>绝对中位差（Median Absolute Deviation，MAD）</strong>。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714003007538-1626193809262.png" alt="image-20210714003007538"></p><p><strong>绝对中位差</strong>是一种统计<strong>离差</strong>的测量。而且，<strong>MAD</strong>是一种鲁棒统计量，<strong>比标准差更能适应数据集中的异常值</strong>。对于标准差，使用的是数据到均值的距离平方，所以大的偏差权重更大，异常值对结果也会产生重要影响。对于<strong>MAD</strong>，少量的异常值不会影响最终的结果。</p><p>由于<strong>MAD</strong>是一个比样本方差或者标准差更鲁棒的度量，它对于不存在均值或者方差的分布效果更好，比如柯西分布。说到这里，我们之前常常用**<u><em>平均值±1.5倍标准差</em></u>**来剔除离群值，但是这样是存在缺陷的，可能直接抹除了我们想要的某些效应。</p><p>所以我们引入R语言中MAD函数来剔除离群值。话不多说，看代码：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">m.mad &lt;- apply(all_exp,1,mad)# 对矩阵每一行求MAD，apply函数不会用的去查查y&#x3D;as.data.frame(m.mad) # 将上述得到的vector转变为数据框dataExprVar &lt;- all_exp[which(m.mad &gt; max(quantile(m.mad, probs&#x3D;seq(0, 1, 0.25))[2],1)),]#不知道你们看到这个会不会懵逼，如果懵逼，先去看看quantile函数，然后再去看看seq函数，再去看看如何取一列数中的第几个，再看看如何选取数据框中如何筛选满足慢些条件的位置。里面第二个“1”是可以变化的，一般情况下，我们取0即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这里，我们取“0”最终结果如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714005458960-1626195299919.png" alt="image-20210714005458960"></p><p>经过上述操作，我们得到一些表达量相对较高的1645个基因。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714005617659-1626195378559.png" alt="image-20210714005617659"></p><h4 id="2-1-7-NA值检测"><a href="#2-1-7-NA值检测" class="headerlink" title="2.1.7 NA值检测"></a>2.1.7 NA值检测</h4><p>先将数据框转置再变为数据框</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">datExpr0 &#x3D; as.data.frame(t(dataExprVar[,]));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检测NA值及低于样本阈值的样本</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">gsg &#x3D; goodSamplesGenes(datExpr0, verbose &#x3D; 3); # 检测适合的基因+样本gsg$allOK # true为OKtable(gsg$allOK)# 若存在较差的样本或者基因，经过下面的代码剔除if (!gsg$allOK)&#123;  if (sum(!gsg$goodGenes)&gt;0)      printFlush(paste(&quot;Removing genes:&quot;, paste(names(datExpr0)[!gsg$goodGenes], collapse &#x3D; &quot;, &quot;)));  if (sum(!gsg$goodSamples)&gt;0)      printFlush(paste(&quot;Removing samples:&quot;, paste(rownames(datExpr0)[!gsg$goodSamples], collapse &#x3D; &quot;, &quot;)));  datExpr0 &#x3D; datExpr0[gsg$goodSamples, gsg$goodGenes]&#125;table(gsg$allOK)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-8-聚类法检测离群值"><a href="#2-1-8-聚类法检测离群值" class="headerlink" title="2.1.8 聚类法检测离群值"></a>2.1.8 聚类法检测离群值</h4><p>直接上代码：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">sampleTree &#x3D; hclust(dist(datExpr0), method &#x3D; &quot;average&quot;); # 计算样本之间的聚类距离tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;1.clusterTree.tiff&quot;,     width &#x3D; 8,height &#x3D; 6,units &#x3D; &quot;in&quot;,     pointsize &#x3D; 5,res &#x3D; 600) # 设置画图函数，一般按照期刊要求走即可，我们要求稍微高一点par(cex &#x3D; 2); # 对文字大小进行设置par(mar &#x3D; c(4,4,4,4)) # 页边距plot(sampleTree,      main &#x3D; &quot;Sample clustering to detect outliers&quot;,     sub&#x3D;&quot;&quot;,      xlab&#x3D;&quot;&quot;,      cex.lab &#x3D; 1.5,      cex.axis &#x3D; 1.5,      cex.main &#x3D; 1.5)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片可以看得出来我们的数据还是很好的，组内组间区分得很明显。这样我们就不用去掉异常的样本了。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714011248576-1626196370170.png" alt="image-20210714011248576"></p><p>如果有离群的样本，可以用下面代码设置相应参数Cut它</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">h&#x3D;300; # 比如我想要出掉M6_2样本，我只需要h&#x3D;40即可！cutHeight&#x3D;habline(h &#x3D; h, col &#x3D; &quot;red&quot;);clust &#x3D; cutreeStatic(sampleTree, cutHeight &#x3D; h, minSize &#x3D; 1) # 剩下的个数table(clust)#以下代码是去除离群后重新组合其他样本keepSamples &#x3D; (clust&#x3D;&#x3D;1) # 保留哪些datExpr &#x3D; datExpr0[keepSamples, ] # 保留keepSamples这些nGenes &#x3D; ncol(datExpr) # 列出基因数量nSamples &#x3D; nrow(datExpr)# 列出样本数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-9-构建表型数据"><a href="#2-1-9-构建表型数据" class="headerlink" title="2.1.9 构建表型数据"></a>2.1.9 构建表型数据</h4><p>一般情况下，如果表型数据较少的，我会选择直接用代码构建：如下</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">traitData &#x3D; data.frame(sample&#x3D;colnames(dat[,2:19]),                       RFI&#x3D;c(rep(0,5),rep(1,5),rep(0,5),rep(1,3)),                       ADG&#x3D;rnorm(18,1.1,0.3));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码看不懂的可以略过，可以直接用下面的方法：</p><p>直接Excel构建好，然后导入，Excel格式如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714085736271-1626224258229.png" alt="image-20210714085736271"></p><p>然后无脑上代码，如下：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">traitData &#x3D; read.xlsx(&quot;..&#x2F;Trait.xlsx&quot;)dim(traitData)names(traitData)Samples &#x3D; rownames(datExpr) # 提取行名（即样本名）并赋值traitRows &#x3D; match(Samples, traitData$Sample)# 匹配切割后的样本，返回一组数组（能够匹配上的样本位置）datTraits &#x3D; traitData[traitRows, -1]; # 构建能够匹配的数据框，去掉第一列的样本名rownames(datTraits) &#x3D; traitData[traitRows, 1]; # 给表型数据添加行名（样本名）collectGarbage()# 回收内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下就是构建好的表型数据</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714090143821-1626224505284.png" alt="image-20210714090143821"></p><p>然后便是重新画聚类图和性状的热图了，代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">sampleTree2 &#x3D; hclust(dist(datExpr), method &#x3D; &quot;average&quot;)traitColors &#x3D; numbers2colors(datTraits, signed &#x3D; FALSE); tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;1.clusterTree with RFI relationship.tiff&quot;,     width &#x3D; 4,     height &#x3D; 2,     units &#x3D; &quot;in&quot;,     pointsize &#x3D; 5,     res &#x3D; 300) plotDendroAndColors(sampleTree2,                     traitColors,                    groupLabels &#x3D; names(datTraits),                     main &#x3D; &quot;Sample dendrogram and trait heatmap&quot;)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714090826743-1626224907796.png" alt="image-20210714090826743"></p><p>在这里，颜色深浅代表性状平均值大小，其中<u>红色是高平均值，白色是较低平均值，灰色是缺失值</u>。</p><p>我简单说下热图怎么制作的吧，比如我们的表型数据”TZ”,是按照上面的表型数据框里面的列（同一个表型在不同样本中的观测值）进行<strong>归一化</strong>，归一化后在进行排序比较。热图的制作可以去看看我的另一篇博文<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">用R语言如何画一张漂亮的热图</a>。好了，这里就扯到这儿啦！</p><h4 id="2-20-保存表达数据及表型数据"><a href="#2-20-保存表达数据及表型数据" class="headerlink" title="2.20 保存表达数据及表型数据"></a>2.20 保存表达数据及表型数据</h4><p>在我们构建完成后，我们需要保存表达矩阵+表型数据用于后续的分析。</p><p>表达矩阵如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714091636913-1626225398130.png" alt="image-20210714091636913"></p><p>表型数据如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714091704946-1626225426205.png" alt="image-20210714091704946"></p><p>保存代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">save(datExpr, datTraits, file &#x3D; &quot;..&#x2F;result&#x2F;1.Deodunum-01-dataInput.RData&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714091948804-1626225590882.png" alt="image-20210714091948804"></p>]]></content>
      
      
      <categories>
          
          <category> WGCNA专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WGCNA </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WGCNA分析专栏1-原理与分析步骤</title>
      <link href="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-yuan-li-yu-fen-xi/"/>
      <url>/2021/07/13/wgcna-fen-xi-zhuan-lan-1-yuan-li-yu-fen-xi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="42a5bb3c3f4472db7cea75e5cd7a99ffd950a272e07f6e53d2f267ee06624fb1">d3ac0ad02026d66bb83b11aeecce13174663dc5397d7aec7adc2deb1ff66ee3405e408eda08efcb95fc4c9c0d6f75cea1b789c87cad18f86847835e84f3e7f98145a13e5accdec4e1fd3ef7fbe43e07bd2e34a75a99232685625abdb8f8d6e5f864a6876f84e55a05c98d955666fb38d463ed2325c24b5063189cfe52625db43a5cdf7ea9e8d22187c1ac193c816e9e7841c84cd24d62e844280ea7de58ce2449ef6beb62603548840945955c19c5ab5edf28fcc35b4ae4826ad643e00d8cf6d4a6a3ead031b5e987f536204f03a0a84b4050759b22a1a635a1d6d86a05ce8383c26c135aff8456a8a46a7308d9940520b39601ebe00a0ea9380ca8341e109151b2a4be4de1b0f585fe96368ae3ecbe061555b9cd2ef31121e55e550472c9d49b8e76dfb3deec2facf9ec3765dd8529b246ee4d4f40bf62b0accb091b7eeb06a7fa7e03df542c00930c18153769404bdfd5cb671da6011510a5bedf3914d44cdde3dfbd76e91d55789cdd53fde93718a1f92da8b5200c94fdb68c160e5672680c93f8b6670f2e00c9f8ad9395ddd6a7d57238a9eeff9e41064e8bf1659604733b27b83c88be517df8010753b5f8608e378d0ee5dd2fc65a11ed7689423c969da27f73c9740c8d68ad8f07cdc0397ff54a0c930ce89eb3034285c0a866690862e57f03accafaec4fb23c2cd9115905b7b1f430933d40ad3026a795078e88ab1a65d51d18177db50d80517740b48f7d488ffe8b7f8ce6709a7efa7ce0fc8dc158798a381d0e73553006d17fb1267e8bf7c0f9b9abeb3b14363ca7c4150088adb0fc87d4756d7cc13651e77c2c6226a5271354e84367984e0171606646722c595fff24c7b2903ed9d788efafe3864929d3535dd78f34a29e199d13bd68413097786f0974637b1456894c7772eb2b7e51e8eb068a22f4af25189f088a5387bf911af6c7a3468364f08d180936886e74cf60436db3f5eac3d8f7bf2265a33efcb0e061b5687024efa139f867b8df862bcd36287d7d8a5b28039063740d4006334ae74ebc873ab93b1a3687d61588a9b3ec588d1451751ecdd101c76070970e0e459186fa43a23dd5a66b9ccbc7ec18b4f51680e76bc997d253d35e3470ea95f162f80fc347f08f86e9e0d442aeef182191fc1c951f87b12a29f308b658e417727e59faffa2f461052bda2e9ec1f4bc124e7ed8e5aeef53f0e78b4c54f29963f342df909428c8f442a8eea75cf5987a5ee53a5ac1a76454068a38c508ac5635b279082953594234f2bf84e9a8f8284328b19e214a1043ae433c124b1048aa2fc374a791038f07bae2be1268ba0e9f8b18c8851504f216025ae714301022cc0d5560e311f48c422a0a38b0558607fbcfa3740cad0986636c67c3f195e6ac9464b3f880a6216f85e5136011ee504733253c066a8bf9dcd8993ba260824cc2b68725d0f70fdfb7a9bd2a6cd4839d0abd39da3918c4cebc2a251f442ee0180cd4a439e8dbf6a6e401b3597e4ca70e88e48f07175772dbe8b366709e28d1f51791fc13c9b6c373b51d09ff68566f0e895762d30f63e24233f923a98b77411baa39bf44116ef9a1fee15d87bbe555388eb146c47ed6113bf34e5ab84eeed3ea19eeaf4e9c5a8dd75fb4d29be59fddbce85c8eeed031bbc8b5552b58229fcfbc93fb5c362d8d4101af09ef51cd3c69c6ae8078068ab6e8928273711fada4bcadeaa4e0da7385fb7d9cd0ec54b87baf8bef0b12695633e050645b207e20d7b038b149b87fae8047f6ca85c54a63942cc2ac622eb32b90016c6d25747ce60d780dc0cecbba2b92505344aad5c74e63f59066e429e64f0b84c1ab6465db0111243b88ce8ca5abb9a2c44e4c79bbdf005b3d843131dfe4c8c0a6dea30bd001a1ebf9280f1f702da8975ffda9ffc976fadab50acaae69757efaa7ffcd620e778f88d9d4a87d479bf59a9009642f5f2cc9424c0fd6f0338d8229253c733d465b0275f7c148434dd4eeb70e7b9d15d8f7d3e3f407c461d6720bc69a1c660f5ddb2c1bd5c75564bc3152991210f7342e040b08fe7a1890a4e82d01dedd61b6fadd2c91abbc34951632f71ebdb07076571f756b53bde401b0b2ca12dc37d0a7e9506518fd5c3b20ac9434279619be97846a1a80076a81ffaa8bf2f4b5aa94351e2a368fb4ddf1ba333e15e68a608e5fe03e9a39390abf12fe80bd2fd226a0d9cfc4f63c0b4d9f0cb4bfd2556dc5943d683f0f4fab90068bd7b6ee5034406fd72e272471af4815eab00f082e44a305c3505259c2d831b34fac7ca8375cbc123de31fed5f1dfe33fece02b02f131bbbb99a02255822cbdccdd1b1a4a2fa1bb3bd707c9006d1ca5b1c4bf04f5bbc99f7af52e6bb0b9bce3ce4e272b73460167935e622554b383e3f79a78303a19fa03dc6565342465ea1d6f93990e3296e902683c1a3c177c879a553789cc43078d238d9f97ec68651a3d48dcaf90387bdbbb98ca86e9363e6660f4f51f9edc5383d70310bd9f1819ea09ac11e476ea3440e108c8ddb980fa0bc012c13acb5f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">本文需打赏66.66元后截图至邮箱chaoyuny@yeah.net获取密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> WGCNA专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WGCNA </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/07/13/test/"/>
      <url>/2021/07/13/test/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1fd10544d79b7ce0f2fdff594f7b54c907c417ac119a8f5d412fe3edcf0a275b">4630436162ade97ba2718b7d0c4b3b63aa2ab1619d9cdbb4bb5fd57226dc61d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">You must enter the password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-3</title>
      <link href="/2021/07/04/ji-yu-r-yu-yan-de-yang-ben-ju-lei-3/"/>
      <url>/2021/07/04/ji-yu-r-yu-yan-de-yang-ben-ju-lei-3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>上一期在文章<a href="https://chaoyuny.github.io/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/">基于R语言的样本聚类-1</a>和<a href="http://localhost:4000/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/">基于R语言的样本聚类-2</a>中分别提到了用于样本聚类（样本件相似性）的两种方法，分别是<strong>聚类树</strong>和<strong>相关性分析</strong>，本期我们将使用R语言作出基于PCA分析的样本聚类。</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 相关性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode连接远程服务器教程</title>
      <link href="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/"/>
      <url>/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载VSCode"><a href="#1-下载VSCode" class="headerlink" title="1. 下载VSCode"></a>1. 下载VSCode</h2><p>VSCode：<a href="https://code.visualstudio.com/docs/?dv=win">点我下载</a></p><p>安装OpenSSH</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">win+x #随后选择Windows PoweShell（管理员）Get-WindowsCapability -Online | ? Name -like &#39;OpenSSH*&#39;#如果未安装，则输入Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置远程服务器"><a href="#2-配置远程服务器" class="headerlink" title="2. 配置远程服务器"></a>2. 配置远程服务器</h2><h3 id="2-1-搜索并安装remote-development插件"><a href="#2-1-搜索并安装remote-development插件" class="headerlink" title="2.1 搜索并安装remote development插件"></a>2.1 搜索并安装remote development插件</h3><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703221512599-1625321714218.png" alt="image-20210703221512599"></p><h3 id="2-2-配置config文件"><a href="#2-2-配置config文件" class="headerlink" title="2.2 配置config文件"></a>2.2 配置config文件</h3><p>按照下图所示顺序，调出<em><strong>config</strong></em>配置文件；</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222054154-1625322055588.png" alt="image-20210703222054154"></p><p>修改或增加下列内容，Host名字徐亚自己起一个，Hostname就是服务器的地址，User是自己在服务器上的用户名。</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222218598-1625322140369.png" alt="image-20210703222218598"></p><p>配置完成后，在左侧可以看到我们的用户名，按照图示顺序，选择<em><strong>linux</strong></em>,如下图：</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222522950-1625322324487.png" alt="image-20210703222522950"></p><p>点击以后就出现下面输入账号密码的界面，输入后等待就好了</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222715094-1625322437153.png" alt="image-20210703222715094"></p><p>好了，这个东西只能说看你运气，可能笔记本不一样 ，  需要的支持插件不一样，如果上述不能解决你的问题，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> linux 专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> vscode </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-2</title>
      <link href="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/"/>
      <url>/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>上一期的文章<a href="https://chaoyuny.github.io/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/">基于R语言的样本聚类-1</a>用R语言实现了基于聚类距离的聚类树的实现，最终的结果是得到基于某个表型（比如<strong>基因表达趋势变化</strong>）的分组，在同一个分支（一类）上的两个样本有更多的相似之处，上一期的最终效果如下图：</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703210751079-1625317673024.png" alt="image-20210703210751079" style="zoom:50%;"><p>而用于检测或发现样本间相似性的方法还有主成分分析法，相关性分析方法等。基于样本件的相关性，也可以将样本进行聚类。主成分分析的原理推荐一篇知乎文章<a href="https://zhuanlan.zhihu.com/p/99123384">前往学习</a>。今天，我们就利用R语言实现这一个分析过程并且可视化。</p><h2 id="2-R语言实现"><a href="#2-R语言实现" class="headerlink" title="2. R语言实现"></a>2. R语言实现</h2><h3 id="2-1-加载包及导入数据"><a href="#2-1-加载包及导入数据" class="headerlink" title="2.1 加载包及导入数据"></a>2.1 加载包及导入数据</h3><p>本次所用到的包<strong>ggcorrplot+openxlsx</strong>，不会安装包的<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">戳我学习</a>，里面有安装包的办法，这里就不多说了。</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">rm(list &#x3D; ls()) # 清空环境变量library(ggcorrplot) # 加载包library(openxlsx) # 加载包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-1-1导入数据"><a href="#2-1-1导入数据" class="headerlink" title="2.1.1导入数据"></a>2.1.1导入数据</h4><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">load(&#39;MydataforStringTie.Rdata&#39;) # 该数据是我的一个数据集，里面包含很多数据，你不必纠结他是干什么的含有什么的，你只需要知道你需要一个下面的“dat&quot;内容的数据框即可！dat&#x3D;GeneCounts # 赋值head(dat,6) # 查看数据框前6行，其实默认的也是6行names(dat) # 查看数据框的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据格式如下：</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212138520.png" alt="image-20210703212138520" style="zoom: 80%;"><h4 id="2-1-2-计算相关系数及其显著性"><a href="#2-1-2-计算相关系数及其显著性" class="headerlink" title="2.1.2 计算相关系数及其显著性"></a>2.1.2 计算相关系数及其显著性</h4><pre class="line-numbers language-b" data-language="b"><code class="language-b">corr&#x3D;round(cor(dat[,]),2) # Calculate the correlation coefficientp.mat&#x3D;cor_pmat(dat)# Calculate the significance of correlation coefficient<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>样本相关性结果如下：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212228561-1625318550132.png" alt="image-20210703212228561"></p><p>由于数据量的问题，我的数据没能检验相关额显著性，如下:</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212334088-1625318615478.png" alt="image-20210703212334088"></p><h3 id="2-2-结果可视化"><a href="#2-2-结果可视化" class="headerlink" title="2.2 结果可视化"></a>2.2 结果可视化</h3><p>准备好数据后，利用<strong>ggcorrplot</strong>函数可以对相关性的分析结果进行可视化，代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">ggcorrplot(corr,           method &#x3D; &#39;square&#39;,# 显示样式，“circle&quot;是第二张图的样子           hc.order &#x3D; TRUE, # 是否聚类           type &#x3D; &#39;lower&#39;, # 上下三角           outline.color &#x3D; &#39;gray60&#39;, # 框颜色           colors &#x3D; c(&#39;green&#39;,&#39;white&#39;,&#39;blue&#39;), # 图颜色           lab &#x3D; TRUE, # 是否显示数字           lab_col &#x3D; &#39;white&#39;, # 数字颜色           lab_size &#x3D; 3, # 数字大小           p.mat &#x3D; p.mat, # 填充           insig &#x3D; &#39;blank&#39;,# 显著的黑色填充           show.diag &#x3D; TRUE, # 只显示对角线一侧           digits &#x3D; 2 #小数保留位数           )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可视化结果如下，可以看得出来我的样本Q23是有些问题的，如果需要考虑离群值，这个样本可能是候选之一：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212606551.png" alt="image-20210703212606551"></p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703213100461-1625319061563.png" alt="image-20210703213100461"></p><p>由于这个分析基本都是在数据预处理的时候用，花里胡哨的那些我就懒得上了，如果喜欢花里胡哨的可以<a href="https://blog.csdn.net/kMD8d5R/article/details/89346052">去看这篇博文</a>。</p><p>好了，今天就更新到这儿，下一期我们更新基于PCA分析的样本聚类。</p><p>记得打赏哟，白嫖我来你家吃饭！</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 相关性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-1</title>
      <link href="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/"/>
      <url>/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-聚类和分类"><a href="#1-1-聚类和分类" class="headerlink" title="1.1 聚类和分类"></a>1.1 聚类和分类</h3><p>有人会觉得<strong>聚类</strong>就是<strong>分类</strong>，而其实在严格意义上，聚类与分类并不是一回事，两者有着很大的差异。</p><p>分类是按照已定的程序模式和标准进行判断划分，如<strong>男人</strong>和<strong>女人</strong>，在这里，你可以理解为这是<strong>分类/分组数据</strong>（注意了，不同的数据类型有不同的检验方法哟）。再比如，我们直接规定把数据的平均值作为中心轴，那么我们可以把这一组数据分为两个组别，即高于平均和等于平均的两个组，这也是分类。顺便扩展一下，我们后期会讲一期<strong>单基因GESA分析</strong>，用到的分组原理大概就是这个呢。<strong>因此，分类是按照固有或者某个标准将数据进行分组</strong>。</p><p>而聚类则分析，事先我们并不知道具体的划分标准，要靠算法进行判断数据之间的相似性，把相似的数据放在一起，也就是说聚类最关键的工作是：<em><strong>探索和挖掘数据中的潜在差异和联系</strong></em>。</p><p>在聚类的结论出来之前，我完全不知道每一类有什么特点，一定要根据聚类的结果通过人的经验来分析，看看聚成的这一类大概有什么特点。</p><h3 id="1-2-聚类的方法"><a href="#1-2-聚类的方法" class="headerlink" title="1.2 聚类的方法"></a>1.2 聚类的方法</h3><p>关于聚类的各种算法，推荐知乎的一篇文章<a href="https://zhuanlan.zhihu.com/p/104355127">点我学习，下例图片来源于知乎</a>。</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703122657356-1625286420689.png" alt="image-20210703122657356" style="zoom:50%;"><h2 id="2-聚类在R语言中的实现"><a href="#2-聚类在R语言中的实现" class="headerlink" title="2 聚类在R语言中的实现"></a>2 聚类在R语言中的实现</h2><h3 id="2-1-包的安装"><a href="#2-1-包的安装" class="headerlink" title="2.1 包的安装"></a>2.1 包的安装</h3><p>这里，我们首先用到两个包，第一个是<strong>WGCNA</strong>，第二个是<strong>openxlsx</strong>，加载它们：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Load the WGCNA packagelibrary(openxlsx) # 导入Excel数据library(WGCNA) # 画聚类图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果还没有安装这两个包，安装方法请移步我的另一篇博文<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">用R语言如何画一张漂亮的热图</a>。</p><h3 id="2-2-数据读入"><a href="#2-2-数据读入" class="headerlink" title="2.2 数据读入"></a>2.2 数据读入</h3><p>先上数据格式，见下图：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703151850922-1625296732671.png" alt="image-20210703151850922"></p><p>再上代码：</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">dat &lt;- read.xlsx(&quot;filename.xlsx&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将上述矩阵转置并转化为数据框</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">datExpr0 &#x3D; as.data.frame(t(dat[,]))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转置之后数据格式如下图，行名是样本名，列名是基因名：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703153427860-1625297669794.png" alt="image-20210703153427860"></p><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><p>如下就可以画图啦</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">sampleTree &#x3D; hclust(dist(datExpr0), method &#x3D; &quot;average&quot;) # 选择计算中心距方法sizeGrWindow(16,9) # 设置画图框的大小par(mar &#x3D; c(4,4,4,4)) # 设置边距，根据实际情况选择plot(sampleTree,      main &#x3D; &quot;Filemane&quot;,#图名字     sub&#x3D;&quot;&quot;, # 标题名字     xlab&#x3D;&quot;&quot;, # X轴名字     cex.lab &#x3D; 1.5, # X轴Y轴名字大小     cex.axis &#x3D; 1.5, #Y轴刻度大小大小     cex.main &#x3D; 1.5) #标题大小dev.off() # 关闭画图装置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述可以画的是聚类树，效果图如下：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703154332418-1625298214047.png" alt="image-20210703154332418"></p><p>下一期我们做样本间的各种相关图，期待与您下次再见~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to build a private blog</title>
      <link href="/2021/07/02/how-to-build-a-private-blog/"/>
      <url>/2021/07/02/how-to-build-a-private-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Software-install"><a href="#1-Software-install" class="headerlink" title="1 Software install"></a>1 Software install</h2><p>1.1 Nodejs,<a href="https://nodejs.org/dist/v14.17.1/node-v14.17.1-x64.msi">click here to download</a><br>1.2 Git,<a href="https://git-scm.com/downloads">click here to download</a></p><h2 id="2-Construct"><a href="#2-Construct" class="headerlink" title="2 Construct"></a>2 Construct</h2><h3 id="2-1-Run-in-“Git”"><a href="#2-1-Run-in-“Git”" class="headerlink" title="2.1 Run in “Git”"></a>2.1 Run in “Git”</h3><p>Check the version for node and npm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo node -v$ hexo npm -v$ npm install # 切换到自己博客的目录下并执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Install-the-“cnpm”-and-“hexo-cli”"><a href="#2-2-Install-the-“cnpm”-and-“hexo-cli”" class="headerlink" title="2.2 Install the “cnpm” and “hexo-cli”"></a>2.2 Install the “cnpm” and “hexo-cli”</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org$ hexo cnpm -v$ cnpm install -g hexo-cli$ hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-constract-a-local-service-for-“Myblog”"><a href="#2-3-constract-a-local-service-for-“Myblog”" class="headerlink" title="2.3 constract a local service for “Myblog”"></a>2.3 constract a local service for “Myblog”</h3><p>To construct and start a “Myblog”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mkdir Myblog$ cd Myblog$ hexo init #初始化自己的博客$ hexo s # 运行自己的博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Check “Myblog” in browser with the below address</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ http:&#x2F;&#x2F;localhost:4000&#x2F; #可以直接在浏览器中打开刚刚的博客<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Write a article</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo n filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To update the content for “Myblog”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>###2.4 Create a blog home based on Github</p><p>Fist,Create a new  respository “YourGithubName.github.io”</p><p>Second, install a “git” plugin</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm install --save hexo-deployer-git # 必须要安装该插件才可以部署到github<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Third, Configure the file “config.yml” in your dir for Myblog as followings</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>type: git<br>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>branch: master<br>Fourth, if your PC is Win10,you should execute these codes</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm install --save hexo-deployer-git # install deployer for uploading$ git config --global user.email xxx$ git config --global user.name xxx$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-beautify-your-blog-layout"><a href="#3-beautify-your-blog-layout" class="headerlink" title="3 beautify your blog layout"></a>3 beautify your blog layout</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia$ hexo c$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Note: you should modify the file “config.yml” as below:</p><p>theme: yilia</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> study </tag>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用R语言如何画一张漂亮的热图</title>
      <link href="/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/"/>
      <url>/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-清空环境变量及控制台"><a href="#1-清空环境变量及控制台" class="headerlink" title="1. 清空环境变量及控制台"></a>1. 清空环境变量及控制台</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rm(list &#x3D; ls())cat(&quot;\014&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-加载包"><a href="#2-加载包" class="headerlink" title="2. 加载包"></a>2. 加载包</h2><p>如果没有请自行下载，如果基础板安装不上，可以用bioconductor安装，<a href="http://bioconductor.org/install/">点我查看安装方法</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">library(tidyverse) #安装包library(openxlsx)library(pheatmap)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-导入数据"><a href="#3-导入数据" class="headerlink" title="3. 导入数据"></a>3. 导入数据</h2><p>这里需要根据自己的数据类型导入，我用的xlsx，所以导入的命令如下，当然，你们也可以用其他函数导入，只要是数据，都可以.这里，我们列是样本名，行名是基因名，不要弄错数据格式了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dat&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;41HubGenes_FPKM.xlsx&quot;,rowNames &#x3D; T)names(dat)HeatmapData&#x3D;dat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-构建列（样本）分组（注释-信息"><a href="#4-构建列（样本）分组（注释-信息" class="headerlink" title="4. 构建列（样本）分组（注释)信息"></a>4. 构建列（样本）分组（注释)信息</h2><p>在这里，矩阵行名是样本名称，列是分组信息，不要弄错了！同理，对基因的分组也是同样的构造办法！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">annotation_row1&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;coldata.xlsx&quot;,rowNames &#x3D; T)annotation_row&#x3D;annotation_row1[,-2] #根据你的数据选取，其他信息都不要annotation_row&#x3D;as.data.frame(annotation_row) #因为只有一列就是数组，所以需要强制转化一下数据类型rownames(annotation_row) &lt;- rownames(annotation_row1)colnames(annotation_row) &lt;- &quot;Sample&quot;annotation_col&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;coldata.xlsx&quot;,rowNames &#x3D; T,sheet &#x3D; 2) #保存与否自己决定save(annotation_col,annotation_row,file &#x3D; &quot;..&#x2F;code&#x2F;heatmap_annotation.Rdata&quot;) #保存与否自己决定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的路径是我自己的路径，你别无脑复制。基础操作不会的<a href="https://www.bilibili.com/video/BV19x411X7C6?from=search&seid=14665690512678618295">点我学习</a></p><h2 id="5-画图与保存"><a href="#5-画图与保存" class="headerlink" title="5. 画图与保存"></a>5. 画图与保存</h2><p>期刊所需要高清图片，参数res调整，里面的参数用法不会的可以“?函数名”即可知道，如“?pheatmap”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tiff(filename &#x3D; &quot;..&#x2F;MergeBasisForPaper&#x2F;Pictures&#x2F;filename.tiff&quot;,width &#x3D; 4,height &#x3D; 2,res &#x3D; 300, # 这是DPI，期刊一般要求300units &#x3D; &quot;in&quot;) # 这是图片长宽为英寸，还可以设置为“cm”par(oma&#x3D;c(3,3,3,3))par(mar&#x3D;c(6,6,4,3) + 0.1)pheatmap(t(HeatmapData),scale &#x3D; &#39;row&#39;, # 标准化行或者列取决于你的数据格式，比如列是sample1-sample5，行名是gene1-gene5,那么标准化就“row”,也就是说我们要看同一个基因在不同样本间的表达量，这样归一化做出来的图才有意义annotation_col &#x3D; annotation_col, # 注释文件annotation_row &#x3D; annotation_row, # 注释文件cluster_rows &#x3D; F, #聚类与否cluster_cols &#x3D; T, #聚类与否#cellwidth &#x3D; 10, #每个小格子的宽度#cellheight &#x3D; 10, #每个小格子的长度angle_col &#x3D; 315, # 横轴标签旋转角度#clustering_method &#x3D; &#39;average&#39;,# 聚类方法#cutree_rows &#x3D; 2, # 切分聚类数量#cutree_cols &#x3D; 5, # 切分聚类数量display_numbers &#x3D; F, # 是否显示数字fontsize_row &#x3D; 3, # 行数字大小fontsize_col &#x3D; 3, # 列数字大小fontsize &#x3D; 3, # 数字大小treeheight_col &#x3D; 5, # 聚类树高度main &#x3D; &quot;Heatmap For Hub Genes&quot;, # 起个名字legend_breaks&#x3D;NA, # 图例color &#x3D; c(&quot;green&quot;,&quot;red&quot;), #自定义颜色，但是这个自定义出来的效果可能没有默认的好treeheight_row &#x3D; 5, # 聚类树高度annotation_colors &#x3D; c(&quot;red&quot;,&quot;blue&quot;,&quot;black&quot;,&quot;yellow&quot;)# 注释的颜色)dev.off() # 关闭画图设备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-结束"><a href="#6-结束" class="headerlink" title="6. 结束"></a>6. 结束</h2><p>好了，这就是热图的做法，不懂的可以留言讨论<br>最后，贴一张效果图</p><p><img src="/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/image-20210702205555203-1625230557110.png" alt="image-20210702205555203"></p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 热图 </tag>
            
            <tag> 差异基因 </tag>
            
            <tag> 转录组数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
