<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WGCNA分析专栏3-表型关联及可视化与重要基因识别</title>
      <link href="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/"/>
      <url>/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/</url>
      
        <content type="html"><![CDATA[<p>经过前面两个专栏的讲解，我们从数据的预处理，到数据模块构建，洋洋洒洒拆解了大概1万字左右的教程，在这个过程中，我自己也学到了不少的东西，感谢好友们的盛情让我学习到很多东西！今天争取把这个教程后面剩下的内容结了。</p><hr><h2 id="1-模块与表型值的关联"><a href="#1-模块与表型值的关联" class="headerlink" title="1. 模块与表型值的关联"></a>1. 模块与表型值的关联</h2><p>老样子，先导入我们前面构建好的数据</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">rm(list &#x3D; ls())# Display the current working directorygetwd();# If necessary, change the path below to the directory where the data files are stored. # &quot;.&quot; means current directory. On Windows use a forward slash &#x2F; instead of the usual \.workingDir &#x3D; &quot;.&quot;;setwd(workingDir); # Load the WGCNA packagelibrary(WGCNA)# The following setting is important, do not omit.options(stringsAsFactors &#x3D; FALSE);# Load the expression and trait data saved in the first partlnames &#x3D; load(file &#x3D; &quot;..&#x2F;result&#x2F;1.Deodunum-01-dataInput.RData&quot;);#The variable lnames contains the names of loaded variables.lnames# Load network data saved in the second part.lnames &#x3D; load(file &#x3D; &quot;..&#x2F;result&#x2F;6.QinchuanDeodunum-02-networkConstruction-auto.RData&quot;);lnames<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单提一句，**.RData**是我们保存R数据的一种比较方便的方法，它不同于保存于csv、TXT、xlsx等格式文件，并且还可以同时保存多个数据，不懂可以翻看前两个专栏的教程，大概是下面这样的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">save(data1,.....,datn,file&#x3D;&quot;filename.Rdata&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1-量化模块与特征关联"><a href="#1-1-量化模块与特征关联" class="headerlink" title="1.1 量化模块与特征关联"></a>1.1 量化模块与特征关联</h3><p>该部分，我们想确定与所测量的表型性状有显著关联的模块，从而确定这个模块内高度相似共表达的基因参与什么生物学问题，并在这个模块内确定处于主导作用的基因。 由于我们已经构建了每个模块信息（eigengene），我们只需将eigengene与外部性状相关联，并寻找最显著的关联。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Define numbers of genes and samplesnGenes &#x3D; ncol(datExpr); # 输出参与计算的基因数量nSamples &#x3D; nrow(datExpr); # 输出参与计算的样本数量# Recalculate MEs with color labelsMEs0 &#x3D; moduleEigengenes(datExpr, moduleColors)$eigengenesMEs &#x3D; orderMEs(MEs0)moduleTraitCor &#x3D; cor(MEs, datTraits, use &#x3D; &quot;p&quot;);moduleTraitPvalue &#x3D; corPvalueStudent(moduleTraitCor, nSamples);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，截几个图，我就不用解释结果了：</p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718192050044-1626607251014.png" alt="image-20210718192050044"></p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718192214720-1626607335983.png" alt="image-20210718192214720"></p><p>module和样本之间的关联（基于样本基因表达）</p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718192234653-1626607356180.png" alt="image-20210718192234653"></p><p>module和性状的关联</p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718192323897-1626607404952.png" alt="image-20210718192323897"></p><p>module与性状相关性显著性检验。在这里，我们可以看出month与<strong>turquoise</strong>模块之间的r=0.97(p=0.001)，其他结果类似。一会儿咱们可视化后会更加清晰，其他的就不仔细看了。</p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718192600330-1626607562079.png" alt="image-20210718192600330"></p><p>话不多说，直接可视化：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">sizeGrWindow(16,9)# Will display correlations and their p-valuestextMatrix &#x3D;  paste(signif(moduleTraitCor, 2), &quot;\n(&quot;,                           signif(moduleTraitPvalue, 1), &quot;)&quot;, sep &#x3D; &quot;&quot;);# 将module与trait的相关性和显著性构建成一个字符串dim(textMatrix) &#x3D; dim(moduleTraitCor)# Display the correlation values within a heatmap plottiff(filename &#x3D; &quot;..&#x2F;result&#x2F;16.tiff&quot;,     width &#x3D; 8,      height &#x3D; 8,     units &#x3D; &#39;in&#39;,     res &#x3D; 600,     pointsize &#x3D; 5)par(mar &#x3D; c(4, 15, 3, 1));labeledHeatmap(Matrix &#x3D; moduleTraitCor,               xLabels &#x3D; names(datTraits),               yLabels &#x3D; names(MEs),               ySymbols &#x3D; names(MEs),               colorLabels &#x3D; FALSE,               colors &#x3D; blueWhiteRed(50),               textMatrix &#x3D; textMatrix,               setStdMargins &#x3D; FALSE,               cex.text &#x3D; 0.7,               zlim &#x3D; c(-1,1),               main &#x3D; paste(&quot;Module-trait relationships&quot;))dev.off()?par<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可视化结果如下：</p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718193732048-1626608253629.png" alt="image-20210718193732048"></p><h3 id="1-2-基因与性状及重要模块间的关系：基因显著性和模块内基因关系"><a href="#1-2-基因与性状及重要模块间的关系：基因显著性和模块内基因关系" class="headerlink" title="1.2 基因与性状及重要模块间的关系：基因显著性和模块内基因关系"></a>1.2 基因与性状及重要模块间的关系：基因显著性和模块内基因关系</h3><p>这句话翻译感觉有点鸟语，英语差的就看我的翻译，还行的就自己翻译去（Gene relationship to trait and important modules: Gene Significance and Module  Membership）</p><p>这这里，我先给大家解释两个术语，<strong>基因显著性</strong>（Gene significance,GS)与<strong>成员之间相关性</strong>（module membership，MM）。</p><p><strong>GS</strong>: associations of individual genes with our trait of interest (month) by defining Gene Significance GS as  (the absolute value of) the correlation between the gene and the trait. <strong>英语差的就看我的翻译，还行的就自己翻译去</strong>。即<strong>感兴趣性状与单个基因之间相关性的绝对值定义为GS</strong>，是否通俗明了？</p><p>MM: For each module, we also define a quantitative  measure of module membership MM as the correlation of the module eigengene and the gene expression profile. <strong>即基因表达与module主成分之间的相关性</strong>。</p><p>说了这么多，不如上代码来得快：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Define variable weight containing the weight column of datTraitInterestedModule &#x3D; datTraits$Month # 选择自己感兴趣的表型，这里我们选择了MonthInterestedModule &#x3D; as.data.frame(InterestedModule);names(InterestedModule) &#x3D; &quot;InterestedModule&quot;# names (colors) of the modulesmodNames &#x3D; substring(names(MEs), 3) #返回MEs第三个字符往后的字符串geneModuleMembership &#x3D; as.data.frame(cor(datExpr, MEs, use &#x3D; &quot;p&quot;));MMPvalue &#x3D; as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));names(geneModuleMembership) &#x3D; paste(&quot;MM&quot;, modNames, sep&#x3D;&quot;&quot;);names(MMPvalue) &#x3D; paste(&quot;p.MM&quot;, modNames, sep&#x3D;&quot;&quot;);geneTraitSignificance &#x3D; as.data.frame(cor(datExpr, InterestedModule, use &#x3D; &quot;p&quot;));GSPvalue &#x3D; as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));names(geneTraitSignificance) &#x3D; paste(&quot;GS.&quot;, names(InterestedModule), sep&#x3D;&quot;&quot;);names(GSPvalue) &#x3D; paste(&quot;p.GS.&quot;, names(InterestedModule), sep&#x3D;&quot;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述代码，我们构建出包含MM的数据框，如下：</p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718200223275-1626609744223.png" alt="image-20210718200223275"></p><h3 id="1-3-模块内部进一步分析：依据高GS和MM挖掘重要基因"><a href="#1-3-模块内部进一步分析：依据高GS和MM挖掘重要基因" class="headerlink" title="1.3 模块内部进一步分析：依据高GS和MM挖掘重要基因"></a>1.3 模块内部进一步分析：依据高GS和MM挖掘重要基因</h3><p>这里可以挖掘到一些重要的基因，具体后面说。这里我们看到这组数据里面，与Month呈正强相关的模块是tarquoise模块，那么我们直接对其进行可视化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">module &#x3D; &#39;turquoise&#39;column &#x3D; match(module, modNames);moduleGenes &#x3D; moduleColors&#x3D;&#x3D;module;sizeGrWindow(7, 7);tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;Fig.4E(magenta).tiff&quot;,     width &#x3D; 6,      height &#x3D; 6,     units &#x3D; &#39;in&#39;,     res &#x3D; 600)verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),                   abs(geneTraitSignificance[moduleGenes, 1]),                   xlab &#x3D; paste(&quot;Module Membership in&quot;, module, &quot;module&quot;),                   ylab &#x3D; &quot;Gene significance for body weight&quot;,                   main &#x3D; paste(&quot;Module membership vs. gene significance\n&quot;),                   cex.main &#x3D; 1.2,                    cex.lab &#x3D; 1.2,                    cex.axis &#x3D; 1.2,                    col &#x3D; &quot;magenta&quot;,                   abline &#x3D; TRUE,                   lmFnc &#x3D; lm)garbage &lt;- dev.off() # 这一行我记得当初总是报错，最后由dev.off()换成这样的代码就好了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如图：</p><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718201101972-1626610262982.png" alt="image-20210718201101972"></p><p>从图片我们可以看出，GS和MM是高度相关的，呈线性关系。</p><h3 id="1-4-输出结果"><a href="#1-4-输出结果" class="headerlink" title="1.4 输出结果"></a>1.4 输出结果</h3><p>还记得我们数据准备的时候做了一个ID的转换吗，现在用的着了，直接读取。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">y&#x3D;read.xlsx(&quot;..&#x2F;data&#x2F;final_expdat.xlsx&quot;)names(y)annot &#x3D; y[,c(1,8)]dim(annot)names(annot)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>annot</strong>的数据如下：</p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718205207402-1626612728678.png" alt="image-20210718205207402" style="zoom: 50%;"><p>然后进行整合并输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geneInfo0 &#x3D; data.frame(gene_id &#x3D; probes,                      geneSymbol &#x3D; annot$SYMBOL[probes2annot],                      LocusLinkID &#x3D; annot$SYMBOL[probes2annot],                      moduleColor &#x3D; moduleColors,                      geneTraitSignificance,                      GSPvalue)# Order modules by their significance for RFImodOrder &#x3D; order(-abs(cor(MEs, InterestedModule, use &#x3D; &quot;p&quot;)));# Add module membership information in the chosen orderfor (mod in 1:ncol(geneModuleMembership))&#123;  oldNames &#x3D; names(geneInfo0)  geneInfo0 &#x3D; data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]],                          MMPvalue[, modOrder[mod]]);  names(geneInfo0) &#x3D; c(oldNames, paste(&quot;MM.&quot;, modNames[modOrder[mod]], sep&#x3D;&quot;&quot;),                       paste(&quot;p.MM.&quot;, modNames[modOrder[mod]], sep&#x3D;&quot;&quot;))&#125;# Order the genes in the geneInfo variable first by module color, then by geneTraitSignificancegeneOrder &#x3D; order(geneInfo0$moduleColor, -abs(geneInfo0$GS.InterestedModule));geneInfo &#x3D; geneInfo0[geneOrder, ]head(geneInfo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/18/wgcna-fen-xi-zhuan-lan-3-biao-xing-guan-lian-ji-ke-shi-hua-yu-chong-yao-ji-yin-shi-bie/image-20210718210143265-1626613304667.png" alt="image-20210718210143265"></p><p>上面图片第5第6列是我们感兴趣的模块，在上面1.2节中有指定是<strong>month</strong>。</p><p>然后我会自己习惯性的保存点其他东西：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">write.xlsx(moduleTraitCor,file &#x3D;&quot;..&#x2F;result&#x2F;17.moduleTraitCor.xlsx&quot; )write.xlsx(moduleTraitPvalue,file &#x3D;&quot;..&#x2F;result&#x2F;17.moduleTraitPvalue.xlsx&quot; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-重要基因识别"><a href="#2-重要基因识别" class="headerlink" title="2. 重要基因识别"></a>2. 重要基因识别</h2><p>直接上代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">library(openxlsx)library(tidyverse)rm(list &#x3D; ls())geneInfo&#x3D;read.xlsx(&quot;result&#x2F;17.geneInfo_Month.xlsx&quot;)y&#x3D;as.data.frame(table(geneInfo$moduleColor)) #统计每个模块中的基因数量core_gene_pink&#x3D;geneInfo %&gt;%   filter(abs(geneInfo$GS.InterestedModule)&gt;&#x3D;0.4 &amp;            abs(geneInfo$MM.red) &gt;&#x3D; 0.9 &amp; moduleColor &#x3D;&#x3D; &quot;red&quot;)  %&gt;%   select(1:6,MM.red,p.MM.red) #筛选关键基因head(core_gene_pink)write.xlsx(core_gene_pink,file &#x3D; &quot;result&#x2F;27.core_gene(month).xlsx&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，还可以根据连接度来筛选关键基因，这里需要用到模块发构建拓扑结构时产生的Tom矩阵，具体怎么构建，见前述<a href="https://chaoyuny.github.io/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/">WGCNA分析专栏2-网络构建与模块识别</a>代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lnames &#x3D; load(file &#x3D; &quot;result&#x2F;1.Deodunum-01-dataInput.RData&quot;);#The variable lnames contains the names of loaded variables.lnames# Load network data saved in the second part.lnames &#x3D; load(file &#x3D; &quot;result&#x2F;4.QinchuanDeodunumTOM-block.1.RData&quot;);lnamesHubGenes &lt;- as.data.frame(chooseTopHubInEachModule(datExpr,moduleColors))colnames(HubGenes)[1]&#x3D;&quot;Hubba&quot;HubGenes&#x3D;data.frame(Module&#x3D;as.character(rownames(HubGenes)),HubGenes&#x3D;HubGenes$Hubba)names(HubGenes)annot&#x3D;read.csv(&quot;..&#x2F;data&#x2F;annot.csv&quot;)names(annot)HubGenes&#x3D;merge(HubGenes,annot,by.x &#x3D; &#39;HubGenes&#39;,by.y&#x3D;&quot;ID&quot;)write.xlsx(HubGenes,file &#x3D; &quot;..&#x2F;result&#x2F;28.HubGenes_of_each_module.xlsx&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，工作完成，后续的工作后续再说。</p>]]></content>
      
      
      <categories>
          
          <category> WGCNA专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WGCNA </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全速上传测序数据至NCBI数据库</title>
      <link href="/2021/07/17/quan-su-shang-chuan-ce-xu-shu-ju-zhi-ncbi-shu-ju-ku/"/>
      <url>/2021/07/17/quan-su-shang-chuan-ce-xu-shu-ju-zhi-ncbi-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<p>今天由于投稿需要，要求将测序的原始数据上传至NCBI或者ENA数据库，于是网上查了半天教程，似乎讲得都不怎么完全，对于第一次接触的人来说还是挺不友好，于是综合各家手法，得到了今天这一套教程。</p><hr><h2 id="1-注册NCBI的账号"><a href="#1-注册NCBI的账号" class="headerlink" title="1. 注册NCBI的账号"></a>1. 注册NCBI的账号</h2><p>没有账号的点击这儿注册：<a href="https://www.ncbi.nlm.nih.gov/account/register/">点我注册</a></p><h2 id="2-登录并转到SRA"><a href="#2-登录并转到SRA" class="headerlink" title="2. 登录并转到SRA"></a>2. 登录并转到SRA</h2><p>注册完成后点击登录，登录后选择<strong>SRA数据库</strong>，并选择如下红框中的<u>Submit to SRA</u>按钮。</p><p><img src="/2021/07/17/quan-su-shang-chuan-ce-xu-shu-ju-zhi-ncbi-shu-ju-ku/image-20210717201429477-1626524071431.png" alt="image-20210717201429477"></p><p>选择后便弹出如下窗口：最重要的是这里我们拿到一个NCBI给定的一个相当于个人的登录号一样的牌照，如下被我遮挡住的地方，直接复制这一行命令，并修改你Aspera的密钥地址（这个安装以后的路径一般默认在这儿：我忘了我是命令行自己变异的还是用conda安装的了，你们需要自己先安装这个软件。</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">~&#x2F;miniconda3&#x2F;bin&#x2F;connect&#x2F;etc&#x2F;asperaweb_id_dsa.openssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/17/quan-su-shang-chuan-ce-xu-shu-ju-zhi-ncbi-shu-ju-ku/image-20210717201725140-1626524246733.png" alt="image-20210717201725140"></p><h2 id="2-3-linux命令行上传数据"><a href="#2-3-linux命令行上传数据" class="headerlink" title="2.3 linux命令行上传数据"></a>2.3 linux命令行上传数据</h2><p>上传的命令如下：这是我自己的路径，你们的需要修改一下</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">ascp -i ~&#x2F;miniconda3&#x2F;bin&#x2F;connect&#x2F;etc&#x2F;asperaweb_id_dsa.openssh \-QT -l1000m -k1 -d RawdataDir \ subasp@upload.ncbi.nlm.nih.gov:uploads&#x2F;email_yeah.net_QHvjADMz&#x2F;sra_data # email这一行就是NCBI给你分配的账号信息，直接拿过来用，sra_data这个是上传保存的位置# -l1000m 这个是上传最大速度为1000 M，刺激吗# -k1 这个是断点续传# -d 原始数据绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好 ，下面是上传的效果图：</p><p><img src="/2021/07/17/quan-su-shang-chuan-ce-xu-shu-ju-zhi-ncbi-shu-ju-ku/image-20210717202428894-1626524670336.png" alt="image-20210717202428894"></p><p>速度超级快的呢！</p><p>现在我看Aspera也有windows版本，大家可以下载使用。可能速度就是没这么快而已！</p>]]></content>
      
      
      <categories>
          
          <category> linux专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> NCBI </tag>
            
            <tag> 上传数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WGCNA分析专栏2-网络构建与模块识别</title>
      <link href="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/"/>
      <url>/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="2-网络构建与模块识别"><a href="#2-网络构建与模块识别" class="headerlink" title="2. 网络构建与模块识别"></a>2. 网络构建与模块识别</h2><h3 id="2-0-对上一期博客的补充与说明"><a href="#2-0-对上一期博客的补充与说明" class="headerlink" title="2.0 对上一期博客的补充与说明"></a>2.0 对上一期博客的补充与说明</h3><p>上一期博客中，我们使用的数据大约1600条，但是当我们筛选 <strong>soft threshold</strong> 的时候出现了歪瓜裂枣！如下:</p><p>全部基因：</p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716080811222.png" alt="image-20210716080811222" style="zoom:25%;"><p>约600个基因：</p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716080849921-1626394131359.png" alt="image-20210716080849921" style="zoom: 50%;"><p>还是一个样子，所以这样的数据集是做不出来的，其中的原因我没去深究，我想可能是数据全是差异显著的数据，破坏了某种平衡吧！所以我后面用了所有的表达数据，维度如下（数据格式，样本名字之类的都没有变化，所以原始数据我就不贴图了：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716081102476-1626394264127.png" alt="image-20210716081102476"></p><p>还是贴个图吧，数据如下</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716082649395-1626395211498.png" alt="image-20210716082649395"></p><p>上一期我是手动用excel去重，当我今天打开这个重复的时候，一千多行，这就没法手动了，太多了，我们今天来个便捷的去重，先做到后面再说！代码如下：</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">library(tidyverse) #需要先加载这个包，去重也可以用R语言的基础函数duplicate，但是我习惯用其他替代包dat &lt;- dat %&gt;% dplyr::distinct(.,SYMBOL,.keep_all &#x3D; TRUE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是去重后的维度，少了一千多个！一般情况，如果我们用的转录本水平的定量，如果换成基因名肯定会有这样的情况，但是如果用转录本名字的话可以避免这个问题。</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716081715807-1626394637809.png" alt="image-20210716081715807"></p><p>如果我们换成转录本去重</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">library(tidyverse) #需要先加载这个包，去重也可以用R语言的基础函数duplicate，但是我习惯用其他替代包dat &lt;- dat %&gt;% dplyr::distinct(.,Transcript_id,.keep_all &#x3D; TRUE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716081949441-1626394790967.png" alt="image-20210716081949441"></p><p>很明显使用转录本去重损失的信息最少，所以我们还是选择转录本去重！然后重复上一期的内容！最后我选择留下了7024个基因进行WGCNA分析！</p><p>说到这里，我稍微有点好奇我们这7024个基因里面包含了多少差异基因，于是韦恩图就出来了！如下，惊不惊喜意不意外？</p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716104605628-1626403566988.png" alt="image-20210716104605628" style="zoom:25%;"><hr><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1  概述"></a>2.1  概述</h3><p>上一篇博文<a href="https://chaoyuny.github.io/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/">WGCNA分析专栏1-数据准备</a>我们介绍如何准备用于WGCNA的基因表达谱数据及表型（临床）数据，得到满足条件的数据后，我们将进行后续的分析。</p><p>面对上述满足条件的成百上千个基因，那我们应该如何进行分析呢？举个简单的例子，假设广场上有1000人，现在需要你找出两名模特，这两名模特需要代表这1000人的水平，那么你会怎么选？很简单，如果是我，我首先会把这1000人按照性别分为两组，一组男人，一组女人！然后按照模特的需求，从体重，身高，长相，三维、肌肉等多个条件进行限定筛选，最后会得出几个人，那么继续再增加条件筛选，筛选出最优的两个，这是一种知道某些条件从而筛选的一种方法，**<u>专业名词我忘了叫什么</u><strong>，好像叫做</strong>分类**，可以去看我的<a href="https://chaoyuny.github.io/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/">基于R语言的样本聚类-1</a>，欢迎补充！还有的方法就是比如常用的降维方法——主成分分析。</p><p>言归正传，我们继续搞上面的那一堆基因，我们需要根据某些特征（表达特征）对基因进行计算、归类，找到相似的gene subset，然后进一步研究gene subset的具体功能，现在我们开始这一期的内容！</p><hr><h3 id="2-2-自动网络构建及模块识别"><a href="#2-2-自动网络构建及模块识别" class="headerlink" title="2.2 自动网络构建及模块识别"></a>2.2 自动网络构建及模块识别</h3><p>首先，老样子，不论三七二十一，为了保住狗命，我们先上下面这个代码 块：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">workingDir &#x3D; &quot;.&quot;;setwd(workingDir); library(WGCNA)options(stringsAsFactors &#x3D; FALSE);enableWGCNAThreads() # 可用核心数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入数据：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">lnames &#x3D; load(file &#x3D; &quot;..&#x2F;result&#x2F;1.Deodunum-01-dataInput.RData&quot;)lnames<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h4 id="2-2-1-软阈值的选择：网络拓扑结构分析"><a href="#2-2-1-软阈值的选择：网络拓扑结构分析" class="headerlink" title="2.2.1 软阈值的选择：网络拓扑结构分析"></a>2.2.1 软阈值的选择：网络拓扑结构分析</h4><p>想要构建加权基因共表达网络，我们首先应该确定一个软阈值β（power value)，将共表达相似度提高到该阈值来计算邻接度，该软阈值的计算是通过<strong>近似无标度拓扑（有点鸟语了，上英语the criterion of approximate scale-free topology）</strong>标准进行。</p><p>上代码，选阈值</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">powers &#x3D; c(seq(1,11,by&#x3D;1), seq(from &#x3D; 12, to&#x3D;20, by&#x3D;2)) # seq里面的数字根据自己的数据来更改sft &#x3D; pickSoftThreshold(datExpr, powerVector &#x3D; powers, verbose &#x3D; 5)tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;3.Scale independence.tiff&quot;,     width &#x3D; 6,height &#x3D; 4,units &#x3D; &quot;in&quot;,     pointsize &#x3D; 5,res &#x3D; 300)par(mfrow &#x3D; c(1,2)) # 设置画图面板，1行2列cex1 &#x3D; 0.9 # 字体大小plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],     xlab&#x3D;&quot;Soft Threshold (power)&quot;,ylab&#x3D;&quot;Scale Free Topology Model Fit,signed R^2&quot;,type&#x3D;&quot;n&quot;,     main &#x3D; paste(&quot;Scale independence&quot;))     text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],     labels&#x3D;powers,cex&#x3D;cex1,col&#x3D;&quot;red&quot;);abline(h&#x3D;0.80,col&#x3D;&quot;black&quot;,lty&#x3D;4,lwd&#x3D;1) #h值的选择是准确性的选择，即R^2，其他参数不会就改变值看图片的变化# 平均连接度plot(sft$fitIndices[,1], sft$fitIndices[,5],     xlab&#x3D;&quot;Soft Threshold (power)&quot;,ylab&#x3D;&quot;Mean Connectivity&quot;, type&#x3D;&quot;n&quot;,     main &#x3D; paste(&quot;Mean connectivity&quot;))text(sft$fitIndices[,1], sft$fitIndices[,5], labels&#x3D;powers, cex&#x3D;cex1,col&#x3D;&quot;red&quot;)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下图：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716121033260-1626408634708.png" alt="image-20210716121033260"></p><p>图1：不同软阈值power下的网络拓扑结构分析。左图显示了无标度拟合指数（y轴）与软阈值power（x轴）的关系。右图显示平均连通性（度数，y轴）与软阈值power（x轴）的关系。</p><p><strong>当选择R^2（无标拓扑适合指数） ＞0.8时，power=8，这里有一个小知识，就是软阈值的选择问题，第一次跨过划线的那个值就是power值，并且 power ≤ 13才行，大于13的表明数据很垃圾，得慎重考虑；同时6,7,8这个范围较好！</strong></p><hr><h4 id="2-2-2-一步法网络模块构建与识别"><a href="#2-2-2-一步法网络模块构建与识别" class="headerlink" title="2.2.2 一步法网络模块构建与识别"></a>2.2.2 一步法网络模块构建与识别</h4><p>先贴上这么一段话，看完2.2.2、2.2.3和2.2.4再来看一遍，会有很好的效果哟：</p><p>We present three different ways of  constructing a network and identifying modules:  a. Using a convenient 1-step network construction and module detection function, suitable for users wishing to arrive  at the result with minimum effort;  b. Step-by-step network construction and module detection for users who would like to experiment with customized/alternate methods;  c. An automatic block-wise network construction and module detection method for users who wish to analyze data  sets too large to be analyzed all in one.  In this tutorial section, we illustrate the step-by-step network construction and module detection.</p><p>一步法直接调用函数生成基因网络</p><pre class="line-numbers language-none"><code class="language-none">power&#x3D;8 # 根据上面的计算，得出的软阈值，我单独提出来用是因为后面很多地方我都用这个常量代替了，就不进行一一输入，这是懒人用法；minModuleSize&#x3D;100 # 这个是指定检测模块中包含的技术数目最小值，因为我这里选择了7千左右个基因，是一个比较大的基数，所以我选择最小基因数为100，这里可以根据你的研究目的来确定，不管你选多少，计算的结果都一致，只是呈现出来的你看见不同而已！net &#x3D; blockwiseModules(datExpr, power &#x3D; power,                       TOMType &#x3D; &quot;unsigned&quot;,                        minModuleSize &#x3D; minModuleSize,                       reassignThreshold &#x3D; 0,                        mergeCutHeight &#x3D; 0.25,                       numericLabels &#x3D; TRUE,                        pamRespectsDendro &#x3D; FALSE,                       saveTOMs &#x3D; TRUE,                       saveTOMFileBase &#x3D; &quot;..&#x2F;result&#x2F;4.QinchuanDeodunumTOM&quot;,                        verbose &#x3D; 3)net$colors #查看模块分配net$MEs # 查看模块eigengenes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：上述我们选择了7000个基因进行了这一项分析，进行这一步的时候回得到两个文件，这是因为<strong>blockwiseModules</strong>函数中的<u><strong>maxBlockSize</strong></u>参数默认5000千，所以需要拆分成2个Tom矩阵。Tom矩阵越多，对后续的画图会产生影响，不利于画图。至于这个数值的设定，可以根据计算机配置来计算：</p><p>≥ 4GB  8000-10000个 genes</p><p>≥ 16GB 20000个 genes</p><p>≥ 32GB 30000个genes。</p><p>做到这里，模块已经构建完毕，都保存在了对象net中，我们可以用如下代码查看有多少个模块及其size</p><pre class="line-numbers language-none"><code class="language-none">table(net$colors)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716124048483-1626410449537.png" alt="image-20210716124048483" style="zoom:50%;"><p>结果显示我们共检测到11个模块，下面是包含的基因数量。<strong>“0”</strong>下面的“<strong>5</strong>”是在这11个模块之外的基因数量。</p><p>使用如下代码进行模块与基因的关系可视化</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">mergedColors &#x3D; labels2colors(net$colors)tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;5.Module colors.tiff&quot;,     width &#x3D; 4,height &#x3D; 2,units &#x3D; &quot;in&quot;,     pointsize &#x3D; 5,res &#x3D; 300)plotDendroAndColors(net$dendrograms[[1]],                     mergedColors[net$blockGenes[[1]]],                    &quot;Module colors&quot;,                    dendroLabels &#x3D; FALSE,                     hang &#x3D; 0.03,                    addGuide &#x3D; TRUE,                     guideHang &#x3D; 0.05,                    )dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716124953764-1626410994990.png" alt="image-20210716124953764"></p><p>保存数据备于后续分析</p><pre class="line-numbers language-none"><code class="language-none">moduleLabels &#x3D; net$colorsmoduleColors &#x3D; labels2colors(net$colors)MEs &#x3D; net$MEs;geneTree &#x3D; net$dendrograms[[1]];save(MEs, moduleLabels, moduleColors, geneTree,      file &#x3D; &quot;..&#x2F;result&#x2F;6.QinchuanDeodunum-02-networkConstruction-auto.RData&quot;)geneTree$labels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-逐步法网络模块构建与识别"><a href="#2-2-3-逐步法网络模块构建与识别" class="headerlink" title="2.2.3 逐步法网络模块构建与识别"></a>2.2.3 逐步法网络模块构建与识别</h4><p><em>写到这里，其实上面已经构建完成了模块，对于一般的使用者或者要求不高的人来说，往下做不做都没多大必要，但是为了教程的完整性，我们还是继续做下去。</em></p><p>首先，还是像2.2.2那样，清空环境变量，导入数据等等婆婆妈妈！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">workingDir &#x3D; &quot;.&quot;;setwd(workingDir); library(WGCNA)options(stringsAsFactors &#x3D; FALSE);enableWGCNAThreads() # 可用核心数# load the datalnames &#x3D; load(file &#x3D; &quot;..&#x2F;result&#x2F;1.Deodunum-01-dataInput.RData&quot;)lnames<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据2.2.2的计算，我们得出<em>power = 8</em> 值和 <em>minModuleSize = 100</em>，那么我们后续的工作也直接利用它即可！</p><h5 id="2-2-3-1-计算相邻矩阵"><a href="#2-2-3-1-计算相邻矩阵" class="headerlink" title="2.2.3.1 计算相邻矩阵"></a>2.2.3.1 计算相邻矩阵</h5><pre class="line-numbers language-none"><code class="language-none">power &#x3D; 8；minModuleSize &#x3D; 100；softPower &#x3D; power;adjacency &#x3D; adjacency(datExpr, power &#x3D; softPower); # 计算模块邻接关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-3-2-计算拓扑重叠矩阵"><a href="#2-2-3-2-计算拓扑重叠矩阵" class="headerlink" title="2.2.3.2 计算拓扑重叠矩阵"></a>2.2.3.2 计算拓扑重叠矩阵</h5><p>影响相邻矩阵的因素较多，比如<strong>噪音</strong>和<strong>非真正关联</strong>，需要将邻接矩阵转化为拓扑重叠矩阵以消除这些影响，并同时计算出不相似度。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TOM &#x3D; TOMsimilarity(adjacency);dissTOM &#x3D; 1-TOM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-2-3-3-利用TOM矩阵对基因进行聚类"><a href="#2-2-3-3-利用TOM矩阵对基因进行聚类" class="headerlink" title="2.2.3.3 利用TOM矩阵对基因进行聚类"></a>2.2.3.3 利用TOM矩阵对基因进行聚类</h5><p>利用<strong>hclust</strong>函数对基因进行层次聚类</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">geneTree &#x3D; hclust(as.dist(dissTOM), method &#x3D; &quot;average&quot;);sizeGrWindow(12,9)plot(geneTree,      xlab&#x3D;&quot;&quot;,      sub&#x3D;&quot;&quot;,      main &#x3D; &quot;Gene clustering on TOM-based dissimilarity&quot;,     labels &#x3D; FALSE,      hang &#x3D; 0.04);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716190127488-1626433289427.png" alt="image-20210716190127488" style="zoom: 50%;"><p>在这个分层聚类的树状图中，一条<strong>叶子</strong>对应一个基因，并且树枝将相互紧密联系的、高度共表达的基因组合在一起。后面的模块识别也是基于这个聚类进行切割模块。在这里，使用的是动态剪切的方法对模块进行切分（<strong>dynamicTreeCut</strong> 包）。</p><p>执行动态剪切：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dynamicMods &#x3D; cutreeDynamic(dendro &#x3D; geneTree,                             distM &#x3D; dissTOM,                            deepSplit &#x3D; 2,                             pamRespectsDendro &#x3D; FALSE,                            minClusterSize &#x3D; minModuleSize);table(dynamicMods)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步我们可以得到相应的模块，如下图：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716190752828-1626433674163.png" alt="image-20210716190752828"></p><p>接着进行模块分布绘制：</p><p>先看一下我们模块的基因分布：加起来就是上述的23个<strong>modules</strong></p><pre class="line-numbers language-none"><code class="language-none">dynamicColors &#x3D; labels2colors(dynamicMods)table(dynamicColors)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716190952118-1626433793380.png" alt="image-20210716190952118"></p><p>可视化：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;12.Gene dendrogram and module colors.tiff&quot;,     width &#x3D; 4,      height &#x3D; 2,     units &#x3D; &#39;in&#39;,     res &#x3D; 300,     pointsize &#x3D; 5)plotDendroAndColors(geneTree,                     dynamicColors,                     &quot;Dynamic Tree Cut&quot;,                    dendroLabels &#x3D; FALSE,                     hang &#x3D; 0.03,                    addGuide &#x3D; TRUE,                     guideHang &#x3D; 0.05,                    main &#x3D; &quot;Gene dendrogram and module colors&quot;)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716191202212-1626433923574.png" alt="image-20210716191202212"></p><h5 id="2-2-3-4-合并高度相似的共表达模块"><a href="#2-2-3-4-合并高度相似的共表达模块" class="headerlink" title="2.2.3.4 合并高度相似的共表达模块"></a>2.2.3.4 合并高度相似的共表达模块</h5><p>为了量化整个模块的共表达相似性，需要计算它们的eigengenes，并根据它们的相关性对它们进行聚类。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Calculate eigengenesMEList &#x3D; moduleEigengenes(datExpr, colors &#x3D; dynamicColors)MEs &#x3D; MEList$eigengenes# Calculate dissimilarity of module eigengenesMEDiss &#x3D; 1-cor(MEs);# Cluster module eigengenesMETree &#x3D; hclust(as.dist(MEDiss), method &#x3D; &quot;average&quot;);# Plot the resulttiff(filename &#x3D; &quot;..&#x2F;result&#x2F;13.clustering of module eigengens.tiff&quot;,     width &#x3D; 4,      height &#x3D; 2,     units &#x3D; &#39;in&#39;,     res &#x3D; 300,     pointsize &#x3D; 5)plot(METree,     xlab &#x3D; &quot;&quot;,      sub &#x3D; &quot;&quot;,     main &#x3D; &quot;Clustering of module eigengenes&quot;)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716191637791-1626434199087.png" alt="image-20210716191637791"></p><p>接下来，我们选择切割高度为0.25进行归类切割，将相似的模块划分为同一个模块。在这里，0.25的高度对应着相似度为0.75，0.1对应0.9的相似度，即如果你需要提高模块中的相似度的话，就将层次聚类的切割高度下降即可，这里我们选择0.25的切割高度。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MEDissThres &#x3D; 0.25# Plot the cut line into the dendrogramabline(h&#x3D;MEDissThres, col &#x3D; &quot;red&quot;)# Call an automatic merging functionmerge &#x3D; mergeCloseModules(datExpr, dynamicColors, cutHeight &#x3D; MEDissThres, verbose &#x3D; 3)# The merged module colorsmergedColors &#x3D; merge$colors;# Eigengenes of the new merged modules:mergedMEs &#x3D; merge$newMEs;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716192100423-1626434461500.png" alt="image-20210716192100423"></p><p>为了看我们合并前后模块的变化，我们再次可视化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;14.tiff&quot;,width &#x3D; 6, height &#x3D; 4.5,units &#x3D; &#39;in&#39;,res &#x3D; 300)plotDendroAndColors(geneTree,                     cbind(dynamicColors, mergedColors),                    c(&quot;Dynamic Tree Cut&quot;, &quot;Merged dynamic&quot;),                    dendroLabels &#x3D; FALSE,                     hang &#x3D; 0.03,                    addGuide &#x3D; TRUE,                     guideHang &#x3D; 0.05)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716192252571-1626434574107.png" alt="image-20210716192252571"></p><p>在随后的分析中，我们将在<strong>mergedColors</strong>中使用合并后的模块颜色。我们保存相关的变量，以便在本教程的后续部分使用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Rename to moduleColorsmoduleColors &#x3D; mergedColors# Construct numerical labels corresponding to the colorscolorOrder &#x3D; c(&quot;grey&quot;, standardColors(50));moduleLabels &#x3D; match(moduleColors, colorOrder)-1;MEs &#x3D; mergedMEs;# Save module colors and labels for use in subsequent partssave(MEs, moduleLabels, moduleColors, geneTree, file &#x3D; &quot;..&#x2F;result&#x2F;15.Deodunum-02-networkConstruction-stepByStep.RData&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-4-大型数据网络构建及模块识别-基于块状网络"><a href="#2-2-4-大型数据网络构建及模块识别-基于块状网络" class="headerlink" title="2.2.4 大型数据网络构建及模块识别-基于块状网络"></a>2.2.4 大型数据网络构建及模块识别-基于块状网络</h4><p>这个部分，一般人基本用不着。这是专门为需要做大数据分析的人准备的，或者是计算机性能一般的人准备的。比如如果我的计算机性能只能一次性计算2000个基因，但我的数据却有10000个，也就是说需要5次才能计算完，那么我们需要将相应的参数调整，并且需要将这些基因拆分为5块。这就是简单的原理。</p><p>首先还是准备工作，不说话了，眼睛都说瞎了，看代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">workingDir &#x3D; &quot;.&quot;;setwd(workingDir); library(WGCNA)options(stringsAsFactors &#x3D; FALSE);enableWGCNAThreads() # 可用核心数# load the datalnames &#x3D; load(file &#x3D; &quot;..&#x2F;result&#x2F;1.Deodunum-01-dataInput.RData&quot;)lnames<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺带给这两个代码，不想解释了</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">power &#x3D; 8；minModuleSize &#x3D; 100；bwnet &#x3D; blockwiseModules(datExpr,                        maxBlockSize &#x3D; 20000,                       power &#x3D; power,                        TOMType &#x3D; &quot;unsigned&quot;,                        minModuleSize &#x3D; minModuleSize,                       reassignThreshold &#x3D; 0,                        mergeCutHeight &#x3D; 0.25,                       numericLabels &#x3D; TRUE,                       saveTOMs &#x3D; TRUE,                       saveTOMFileBase &#x3D; &quot;..&#x2F;result&#x2F;8.QinchuanDeodumunTOM-blockwise&quot;,                       verbose &#x3D; 3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas"># Load the results of single-block analysisload(file &#x3D; &quot;FemaleLiver-02-networkConstruction-auto.RData&quot;);# Relabel blockwise modulesbwLabels &#x3D; matchLabels(bwnet$colors, moduleLabels);# Convert labels to colors for plottingbwModuleColors &#x3D; labels2colors(bwLabels)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716195945807-1626436786837.png" alt="image-20210716195945807"></p><p>可视化：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;9.Gene dendrogram and module colors in block 1.tiff&quot;,width &#x3D; 4, height &#x3D; 2,units &#x3D; &#39;in&#39;,res &#x3D; 300,pointsize &#x3D; 5)plotDendroAndColors(bwnet$dendrograms[[1]],                     bwModuleColors[bwnet$blockGenes[[1]]],                    &quot;Module colors&quot;,                     main &#x3D; &quot;Gene dendrogram and module colors in block 1&quot;,                     dendroLabels &#x3D; FALSE,                     hang &#x3D; 0.03,                    addGuide &#x3D; TRUE,                     guideHang &#x3D; 0.05)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716200352247-1626437033411.png" alt="image-20210716200352247"></p><p>将这里的结果与前面2.2.2中的比较：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;10.Single block gene dendrogram and module colors.tiff&quot;,     width &#x3D; 4,      height &#x3D; 2,     units &#x3D; &#39;in&#39;,     res &#x3D; 300,     pointsize &#x3D; 5)plotDendroAndColors(geneTree,                    cbind(moduleColors, bwModuleColors),                    c(&quot;Single block&quot;, &quot;2 blocks&quot;),                    main &#x3D; &quot;Single block gene dendrogram and module colors&quot;,                    dendroLabels &#x3D; FALSE,                     hang &#x3D; 0.03,                    addGuide &#x3D; TRUE,                     guideHang &#x3D; 0.05)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716200515199-1626437116508.png" alt="image-20210716200515199"></p><p>现在我们验证一下，在单块法和块法中相互对应的模块的eigengenes是极其相似的。我们首先根据单块和分块的模块颜色来计算模块eigengenes。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blockwiseMEs1 &#x3D; match(names(singleBlockMEs), names(blockwiseMEs))blockwiseMEs1blockwiseMEs&#x3D;blockwiseMEs[,c(1:8)] # 如果不一样需要将上面运行的数字往这里填一下，下同singleBlockMEs1 &#x3D; match(names(blockwiseMEs), names(singleBlockMEs))singleBlockMEs1singleBlockMEs &#x3D; singleBlockMEs[,c(1,2,5,6,7,10,12,13)]dim(blockwiseMEs)dim(singleBlockMEs)single2blockwise &#x3D; match(names(singleBlockMEs), names(blockwiseMEs)) # single2blockwisesignif(diag(cor(blockwiseMEs[,single2blockwise],singleBlockMEs)),3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="/2021/07/15/wgcna-fen-xi-zhuan-lan-2-wang-luo-gou-jian-yu-mo-kuai-shi-bie/image-20210716201026563-1626437428033.png" alt="image-20210716201026563"></p><p>可以看出这些模块的相关性很强，并且都是正相关，惊不惊喜，意不意外？</p>]]></content>
      
      
      <categories>
          
          <category> WGCNA专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WGCNA </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WGCNA分析专栏1-数据准备</title>
      <link href="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/"/>
      <url>/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简要概述"><a href="#1-简要概述" class="headerlink" title="1. 简要概述"></a>1. 简要概述</h2><h3 id="1-1-WGCNA用来做什么"><a href="#1-1-WGCNA用来做什么" class="headerlink" title="1.1 WGCNA用来做什么"></a>1.1 WGCNA用来做什么</h3><p><strong>Weighted Gene Co-Expression Network Analysis</strong>（<strong>WGCNA， 加权基因共表达网络分析</strong>），主要用于鉴定表达模式相似的基因<strong>集合</strong>（module）。解析<strong>基因集合</strong>与<strong>样品表型</strong>之间的联系，绘制<strong>基因集合</strong>中<strong>基因之间</strong>的调控网络并<strong>鉴定关键调控基因</strong>。</p><h3 id="1-2-基本过程"><a href="#1-2-基本过程" class="headerlink" title="1.2 基本过程"></a>1.2 基本过程</h3><p>详细过程请<a href="https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-9-559/figures/1">点击</a>，这是原图链接，追求高清的可以去看看。总结下来，应包含以下几个过程：</p><p>A、构建基因关系网络</p><p>B、构建基因模块</p><p>C、筛选关键模块</p><p>D、鉴定关键基因</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713120432331.png" alt="image-20210713120432331"></p><h2 id="2-数据准备"><a href="#2-数据准备" class="headerlink" title="2. 数据准备"></a>2. 数据准备</h2><p>在WGCNA分析的过程中，我们所用到的文件有两个，其一是基因表达文件，其二是表型文件。</p><p>这这里，基因表达文件我们只能用表达量，不能使用计数矩阵，表达量比如RPKM/FPKM/TPM等均可，也可以用DEseq2标准化后的数据。</p><p>同时，表型文件是我们研究的表型分组数据，比如<strong>数量性状</strong>[<em>又叫<u>连续型变量</u></em>]的产肉量、产奶量、跳高等。或分类变量[<em>又叫<u>离散型变量</u></em>]，这一类数据比如月龄、产犊胎次、蛋壳颜色、药物效果等。</p><h3 id="2-1-基因表达文件的准备"><a href="#2-1-基因表达文件的准备" class="headerlink" title="2.1 基因表达文件的准备"></a>2.1 基因表达文件的准备</h3><p>今天这个部分我用好基友**<a href="https://wsz1207.github.io/">书哲</a>**大神的数据来进行演示。</p><h4 id="2-1-1-安装R语言及Rstudio"><a href="#2-1-1-安装R语言及Rstudio" class="headerlink" title="2.1.1 安装R语言及Rstudio"></a>2.1.1 安装R语言及Rstudio</h4><p>详细的安装方法我就不介绍了，这里给大家提个醒，也是经常出现坑的地方！</p><p>第一：他们两安装的路径不能含有中文路径，出现中文路径估计某天你就会发现它不工作了！！！切记！</p><p>第二：先安装R内核，我一般选择<strong>清华镜像</strong>，<a href="https://cran.r-project.org/mirrors.html">点我安装</a>；安装完成后你再安装Rstudio，选择免费版就好，一般科研工作者足够用了！<a href="https://www.rstudio.com/products/rstudio/">点我安装</a></p><p>本次WGCNA分享我所用的<u><strong>内核+Rstudio</strong></u>版本如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713105657127-1626145018446.png" alt="image-20210713105657127"></p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713105717294-1626145038575.png" alt="image-20210713105717294"></p><h4 id="2-1-2-包的安装"><a href="#2-1-2-包的安装" class="headerlink" title="2.1.2 包的安装"></a>2.1.2 包的安装</h4><p>在安装R包时，会出现各种版本不兼容的问题，为此<a href="http://bioconductor.org/">Bioconductor</a>完美解决了这个问题。首先，我们先安装这个万能的管理包：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">if (!requireNamespace(&quot;BiocManager&quot;, quietly &#x3D; TRUE))    install.packages(&quot;BiocManager&quot;)BiocManager::install() # 里面可以指定对应的版本，如  “version &#x3D; &quot;3.13&quot;”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就可以愉快的安装包了，下面贴上我在使用的包，你们可以酌情安装，在以后使用的时候直接使用以下命令安装即可：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">BiocManager::install(&quot;Packagename&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我所用包：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">BiocManager::install(c(&quot;org.Bt.eg.db&quot;,&quot;DESeq2&quot;,&quot;dplyr&quot;,&quot;RColorBrewer&quot;,                       &quot;genefilter&quot;,&quot;GO.db&quot;,&quot;topGO&quot;,&quot;GSEABase&quot;,                       &quot;clusterProfiler&quot;,&quot;fgsea&quot;,&quot;tidyverse&quot;,&quot;ggpubr&quot;,                       &quot;pheatmap&quot;,&quot;DESeq2&quot;,&quot;gplots&quot;,&quot;GOplot&quot;,&quot;ggplot2&quot;,                       &quot;enrichplot&quot;,&quot;UpSetR&quot;,&quot;VennDiagram&quot;,&quot;openxlsx&quot;,                       &quot;WGCNA&quot;,&quot;gmodels&quot;,&quot;ggcorrplot&quot;,&quot;scatterplot3d&quot;                       ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载某一个包用下面一个命令：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">library(Packagename)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-3-数据导入"><a href="#2-1-3-数据导入" class="headerlink" title="2.1.3 数据导入"></a>2.1.3 数据导入</h4><p>Ok，在上面的准备工作做完了以后，我们开始导入数据。在开始一个项目之前，我个人习惯性进行如下操作：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">rm(list &#x3D; ls()) # 清空环境变量，这个的作用不用我多说吧getwd(); # 获取当前工作路劲workingDir &#x3D; &quot;.&quot; # 设置当前工作路径为“.”,目的是方便我们要陪你过Tab键补齐和切换路径setwd(workingDir)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>加载包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">library(openxlsx)library(WGCNA)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>个人习惯性导入数据前都会用如下代码先指定一下，防止将数据中的<strong>字符串</strong>当做<strong>因子</strong>处理</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">options(stringsAsFactors &#x3D; FALSE)# 不要将字符串当做因子处理<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入数据</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">dat&#x3D;read.xlsx(&quot;..&#x2F;Filename.xlsx&quot;) # 根据自己的喜好选择合适的导入方式，如TXT，tsv，csv格式等dim(dat) # 查看dat的维度head(dat) # 查看dat的前6行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>导入后如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713112239061-1626146561265.png" alt="image-20210713112239061"></p><p>这个实验室1因子2水平3个重复的设计，不懂的自己去翻生物统计的书。</p><h4 id="2-1-4-ID转换"><a href="#2-1-4-ID转换" class="headerlink" title="2.1.4 ID转换"></a>2.1.4 ID转换</h4><p>通常，我们常见的基因ID是gene symbol，即类似CCK /CDH2/P53/IGF1/FN1之类。上述的基因ID看起来是<strong>Ensembl</strong> 注释文件中的命名风格。这里我们转换一下ID。</p><p>加载包</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">library(org.Bt.eg.db) #这是物种牛上的注释包，其他物种的需要下载对应注释包library(GO.db)library(topGO)library(GSEABase)library(clusterProfiler)library(fgsea)library(tidyr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取需要转化的ID并转化为字符串</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">trans_id &lt;- dat$ID symbol&#x3D;as.character(trans_id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转换</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">ids_to_symbol &lt;- bitr(symbol,                      fromType&#x3D;&quot;ENSEMBLTRANS&quot;, # 从ENSEMBLTRANS转化至下面的两种ID                      toType&#x3D;c(&#39;ENTREZID&#39;,&quot;SYMBOL&quot;),                      OrgDb&#x3D;&quot;org.Bt.eg.db&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转换后结果如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713122029415-1626150030953.png" alt="image-20210713122029415"></p><p>提示有13.37%的基因名转换不成功！这个数据如果偏大可能是你的注释包可能弄错了，我这边这么高的原因可能是黄牛属与水牛属的区别。当然，这一步可以去<a href="https://david.ncifcrf.gov/">David网站</a>上进行转化。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713152635218-1626161196621.png" alt="image-20210713152635218"></p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713153027568-1626161428821.png" alt="image-20210713153027568"></p><p>折腾一番后，结果如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713153118631-1626161479986.png" alt="image-20210713153118631"></p><p>两种方法都是2100多个，选其一即可。</p><h4 id="2-1-5-合并转换结果"><a href="#2-1-5-合并转换结果" class="headerlink" title="2.1.5 合并转换结果"></a>2.1.5 合并转换结果</h4><p>直接上代码：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">dat&#x3D;merge(dat,ids_to_symbol,by.x&#x3D;&quot;ID&quot;,by.y&#x3D;&quot;ENSEMBLTRANS&quot;) # 合并两个数据框head(dat)rownames(dat) &lt;- dat$SYMBOL #将SYMBOL命为行名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>合并结果如下图，但是当我们命名的时候出现了以下的的问题：<strong>行名重复！</strong></p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713220357341-1626185038270.png" alt="image-20210713220357341"></p><p>仔细检查了下，原来数据是基于转录本的定量，所以有重复很正常！那么我们就用Ensymbol ID作为行名，这个转化的结果保存起来后面备用！当进行了行名指定后，还是出现了这个行名重复的问题，如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713220801891-1626185284058.png" alt="image-20210713220801891"></p><p>写到这里，我突然想到了我之前做比对和定量的时候，用的是UCSC的参考基因组+注释文件，那里面的转录本都有不同的编号，不会出现这个问题！既然这样，这2100多个基因都是差异转录本，那么我继续去掉重复，然后再命名。</p><p>在去掉重复之前，我们先看看有多少个重复，代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">y&#x3D;as.data.frame(table(dat$ID))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如图：可以看出其实重复的并不是很多，这里有两种办法，一种是手动去重，也就是留下差异加大、表达量高一些的基因，这种需要一个个去检查。这里我为了保证数据更可靠，就直接检查去除。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713221837621.png" alt="image-20210713221837621"></p><p>去除的话直接用数据框的操作方式就行了,但当我准备这样干的时候，问题来了，看图：同一个Ensymbol的ID，又对应了不同的Symbol ID [<strong>我崩溃了！！！</strong>]。其实刚刚我同样用了symbol ID做了一次，发现大小写字母的也算是重复，哥哥我也是崩溃的！比如BoLA,BOLA也算重复！</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713222021459-1626186023179.png" alt="image-20210713222021459"></p><p>那好，既然这么刚，那我们直接去Excel把它搞一下！先保存！</p><pre class="line-numbers language-none"><code class="language-none">write.xlsx(dat,&quot;..&#x2F;Expdat_real.xlsx&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存后的如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713223538790-1626186940303.png" alt="image-20210713223538790"></p><p>打开操作它：先按照symbol<strong>升序</strong>，随后进行<strong>条件格式高亮重复值</strong>，再进行<strong>颜色排序</strong>，效果如下：然后修改就是了</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713223821202-1626187103335.png" alt="image-20210713223821202"></p><p>然后重复的全被我添加了后缀，如图：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210713224134067-1626187295630.png" alt="image-20210713224134067"></p><h4 id="2-1-6-表达量适合度检测"><a href="#2-1-6-表达量适合度检测" class="headerlink" title="2.1.6 表达量适合度检测"></a>2.1.6 表达量适合度检测</h4><p>经过上面的处理，我们终于拿到了想要的数据，重新导入，并留下我们想要的数据</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">dat&#x3D;read.xlsx(&quot;..&#x2F;Expdat_real.xlsx&quot;) head(dat)rownames(dat) &lt;- dat$SYMBOL #给行命名colnames(dat) #查看列名all_exp &#x3D; dat[,2:7] # 最后保存只有表达量数据的数据框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步得到的数据格式如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714002259952-1626193381281.png" alt="image-20210714002259952"></p><p>上述我们拿到了一个表达矩阵，包含了约2千个观测值，往往在我们的研究中，可能这里得到的是数以万计的基因，比如我自己弄的就有3万个左右，那么这么多的基因，我们肯定没法全部考虑进去，需要进行一定的处理后保留上千个基因，比如3千，5千，1万啥的，这里就需要有相应的处理方式保留想要用于WGCNA分析的基因。</p><p>基于上述的需求，我们这里引入一个统计量-<strong>绝对中位差（Median Absolute Deviation，MAD）</strong>。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714003007538-1626193809262.png" alt="image-20210714003007538"></p><p><strong>绝对中位差</strong>是一种统计<strong>离差</strong>的测量。而且，<strong>MAD</strong>是一种鲁棒统计量，<strong>比标准差更能适应数据集中的异常值</strong>。对于标准差，使用的是数据到均值的距离平方，所以大的偏差权重更大，异常值对结果也会产生重要影响。对于<strong>MAD</strong>，少量的异常值不会影响最终的结果。</p><p>由于<strong>MAD</strong>是一个比样本方差或者标准差更鲁棒的度量，它对于不存在均值或者方差的分布效果更好，比如柯西分布。说到这里，我们之前常常用**<u><em>平均值±1.5倍标准差</em></u>**来剔除离群值，但是这样是存在缺陷的，可能直接抹除了我们想要的某些效应。</p><p>所以我们引入R语言中MAD函数来剔除离群值。话不多说，看代码：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">m.mad &lt;- apply(all_exp,1,mad)# 对矩阵每一行求MAD，apply函数不会用的去查查y&#x3D;as.data.frame(m.mad) # 将上述得到的vector转变为数据框dataExprVar &lt;- all_exp[which(m.mad &gt; max(quantile(m.mad, probs&#x3D;seq(0, 1, 0.25))[2],1)),]#不知道你们看到这个会不会懵逼，如果懵逼，先去看看quantile函数，然后再去看看seq函数，再去看看如何取一列数中的第几个，再看看如何选取数据框中如何筛选满足慢些条件的位置。里面第二个“1”是可以变化的，一般情况下，我们取0即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这里，我们取“0”最终结果如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714005458960-1626195299919.png" alt="image-20210714005458960"></p><p>经过上述操作，我们得到一些表达量相对较高的1645个基因。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714005617659-1626195378559.png" alt="image-20210714005617659"></p><h4 id="2-1-7-NA值检测"><a href="#2-1-7-NA值检测" class="headerlink" title="2.1.7 NA值检测"></a>2.1.7 NA值检测</h4><p>先将数据框转置再变为数据框</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">datExpr0 &#x3D; as.data.frame(t(dataExprVar[,]));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检测NA值及低于样本阈值的样本</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">gsg &#x3D; goodSamplesGenes(datExpr0, verbose &#x3D; 3); # 检测是否有基因和样本有较多的缺失值gsg$allOK # true为OKtable(gsg$allOK)# 如果最后一条语句返回TRUE，所有基因都通过了检测。如果不是，我们就从数据中删除违规的基因和样本。# 若存在较差的样本或者基因，经过下面的代码剔除if (!gsg$allOK)&#123;  if (sum(!gsg$goodGenes)&gt;0)      printFlush(paste(&quot;Removing genes:&quot;, paste(names(datExpr0)[!gsg$goodGenes], collapse &#x3D; &quot;, &quot;)));  if (sum(!gsg$goodSamples)&gt;0)      printFlush(paste(&quot;Removing samples:&quot;, paste(rownames(datExpr0)[!gsg$goodSamples], collapse &#x3D; &quot;, &quot;)));  datExpr0 &#x3D; datExpr0[gsg$goodSamples, gsg$goodGenes]&#125;table(gsg$allOK)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-8-聚类法检测样本离群值"><a href="#2-1-8-聚类法检测样本离群值" class="headerlink" title="2.1.8 聚类法检测样本离群值"></a>2.1.8 聚类法检测样本离群值</h4><p>接下来我们对样本进行聚类（与后面的基因聚类相反），看看是否有明显的离群值。</p><p>直接上代码：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">sampleTree &#x3D; hclust(dist(datExpr0), method &#x3D; &quot;average&quot;); # 计算样本之间的聚类距离tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;1.clusterTree.tiff&quot;,     width &#x3D; 8,height &#x3D; 6,units &#x3D; &quot;in&quot;,     pointsize &#x3D; 5,res &#x3D; 600) # 设置画图函数，一般按照期刊要求走即可，我们要求稍微高一点par(cex &#x3D; 2); # 对文字大小进行设置par(mar &#x3D; c(4,4,4,4)) # 页边距plot(sampleTree,      main &#x3D; &quot;Sample clustering to detect outliers&quot;,     sub&#x3D;&quot;&quot;,      xlab&#x3D;&quot;&quot;,      cex.lab &#x3D; 1.5,      cex.axis &#x3D; 1.5,      cex.main &#x3D; 1.5)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片可以看得出来我们的数据还是很好的，组内组间区分得很明显。这样我们就不用去掉异常的样本了。</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714011248576-1626196370170.png" alt="image-20210714011248576"></p><p>如果有离群的样本，可以用下面代码设置相应参数Cut它</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">h&#x3D;300; # 比如我想要出掉M6_2样本，我只需要h&#x3D;40即可！cutHeight&#x3D;habline(h &#x3D; h, col &#x3D; &quot;red&quot;);clust &#x3D; cutreeStatic(sampleTree, cutHeight &#x3D; h, minSize &#x3D; 1) # 剩下的个数table(clust)#以下代码是去除离群后重新组合其他样本keepSamples &#x3D; (clust&#x3D;&#x3D;1) # 保留哪些datExpr &#x3D; datExpr0[keepSamples, ] # 保留keepSamples这些nGenes &#x3D; ncol(datExpr) # 列出基因数量nSamples &#x3D; nrow(datExpr)# 列出样本数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-9-构建表型数据"><a href="#2-1-9-构建表型数据" class="headerlink" title="2.1.9 构建表型数据"></a>2.1.9 构建表型数据</h4><p>一般情况下，如果表型数据较少的，我会选择直接用代码构建：如下</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">traitData &#x3D; data.frame(sample&#x3D;colnames(dat[,2:19]),                       RFI&#x3D;c(rep(0,5),rep(1,5),rep(0,5),rep(1,3)),                       ADG&#x3D;rnorm(18,1.1,0.3));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码看不懂的可以略过，可以直接用下面的方法：</p><p>直接Excel构建好，然后导入，Excel格式如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714085736271-1626224258229.png" alt="image-20210714085736271"></p><p>然后无脑上代码，如下：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">traitData &#x3D; read.xlsx(&quot;..&#x2F;Trait.xlsx&quot;)dim(traitData)names(traitData)Samples &#x3D; rownames(datExpr) # 提取行名（即样本名）并赋值traitRows &#x3D; match(Samples, traitData$Sample)# 匹配切割后的样本，返回一组数组（能够匹配上的样本位置）datTraits &#x3D; traitData[traitRows, -1]; # 构建能够匹配的数据框，去掉第一列的样本名rownames(datTraits) &#x3D; traitData[traitRows, 1]; # 给表型数据添加行名（样本名）collectGarbage()# 回收内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下就是构建好的表型数据</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714090143821-1626224505284.png" alt="image-20210714090143821"></p><p>然后便是重新画聚类图和性状的热图了（表型与样本树状图的关系可视化），代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">sampleTree2 &#x3D; hclust(dist(datExpr), method &#x3D; &quot;average&quot;)traitColors &#x3D; numbers2colors(datTraits, signed &#x3D; FALSE); tiff(filename &#x3D; &quot;..&#x2F;result&#x2F;1.clusterTree with RFI relationship.tiff&quot;,     width &#x3D; 4,     height &#x3D; 2,     units &#x3D; &quot;in&quot;,     pointsize &#x3D; 5,     res &#x3D; 300) plotDendroAndColors(sampleTree2,                     traitColors,                    groupLabels &#x3D; names(datTraits),                     main &#x3D; &quot;Sample dendrogram and trait heatmap&quot;)dev.off()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714090826743-1626224907796.png" alt="image-20210714090826743"></p><p>在这里，颜色深浅代表性状平均值大小，其中<u>红色是高平均值，白色是较低平均值，灰色是缺失值</u>。</p><p>我简单说下热图怎么制作的吧，比如我们的表型数据”TZ”,是按照上面的表型数据框里面的列（同一个表型在不同样本中的观测值）进行<strong>归一化</strong>，归一化后在进行排序比较。热图的制作可以去看看我的另一篇博文<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">用R语言如何画一张漂亮的热图</a>。好了，这里就扯到这儿啦！</p><h4 id="2-20-保存表达数据及表型数据"><a href="#2-20-保存表达数据及表型数据" class="headerlink" title="2.20 保存表达数据及表型数据"></a>2.20 保存表达数据及表型数据</h4><p>在我们构建完成后，我们需要保存表达矩阵+表型数据用于后续的分析。</p><p>表达矩阵如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714091636913-1626225398130.png" alt="image-20210714091636913"></p><p>表型数据如下：</p><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714091704946-1626225426205.png" alt="image-20210714091704946"></p><p>保存代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">save(datExpr, datTraits, file &#x3D; &quot;..&#x2F;result&#x2F;1.Deodunum-01-dataInput.RData&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/13/wgcna-fen-xi-zhuan-lan-1-shu-ju-zhun-bei/image-20210714091948804-1626225590882.png" alt="image-20210714091948804"></p>]]></content>
      
      
      <categories>
          
          <category> WGCNA专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WGCNA </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/07/13/test/"/>
      <url>/2021/07/13/test/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1fd10544d79b7ce0f2fdff594f7b54c907c417ac119a8f5d412fe3edcf0a275b">4630436162ade97ba2718b7d0c4b3b63aa2ab1619d9cdbb4bb5fd57226dc61d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">You must enter the password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-3</title>
      <link href="/2021/07/04/ji-yu-r-yu-yan-de-yang-ben-ju-lei-3/"/>
      <url>/2021/07/04/ji-yu-r-yu-yan-de-yang-ben-ju-lei-3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>上一期在文章<a href="https://chaoyuny.github.io/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/">基于R语言的样本聚类-1</a>和<a href="http://localhost:4000/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/">基于R语言的样本聚类-2</a>中分别提到了用于样本聚类（样本件相似性）的两种方法，分别是<strong>聚类树</strong>和<strong>相关性分析</strong>，本期我们将使用R语言作出基于PCA分析的样本聚类。</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 相关性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode连接远程服务器教程</title>
      <link href="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/"/>
      <url>/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载VSCode"><a href="#1-下载VSCode" class="headerlink" title="1. 下载VSCode"></a>1. 下载VSCode</h2><p>VSCode：<a href="https://code.visualstudio.com/docs/?dv=win">点我下载</a></p><p>安装OpenSSH</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">win+x #随后选择Windows PoweShell（管理员）Get-WindowsCapability -Online | ? Name -like &#39;OpenSSH*&#39;#如果未安装，则输入Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置远程服务器"><a href="#2-配置远程服务器" class="headerlink" title="2. 配置远程服务器"></a>2. 配置远程服务器</h2><h3 id="2-1-搜索并安装remote-development插件"><a href="#2-1-搜索并安装remote-development插件" class="headerlink" title="2.1 搜索并安装remote development插件"></a>2.1 搜索并安装remote development插件</h3><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703221512599-1625321714218.png" alt="image-20210703221512599"></p><h3 id="2-2-配置config文件"><a href="#2-2-配置config文件" class="headerlink" title="2.2 配置config文件"></a>2.2 配置config文件</h3><p>按照下图所示顺序，调出<em><strong>config</strong></em>配置文件；</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222054154-1625322055588.png" alt="image-20210703222054154"></p><p>修改或增加下列内容，Host名字徐亚自己起一个，Hostname就是服务器的地址，User是自己在服务器上的用户名。</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222218598-1625322140369.png" alt="image-20210703222218598"></p><p>配置完成后，在左侧可以看到我们的用户名，按照图示顺序，选择<em><strong>linux</strong></em>,如下图：</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222522950-1625322324487.png" alt="image-20210703222522950"></p><p>点击以后就出现下面输入账号密码的界面，输入后等待就好了</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222715094-1625322437153.png" alt="image-20210703222715094"></p><p>好了，这个东西只能说看你运气，可能笔记本不一样 ，  需要的支持插件不一样，如果上述不能解决你的问题，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> linux专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> vscode </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-2</title>
      <link href="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/"/>
      <url>/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>上一期的文章<a href="https://chaoyuny.github.io/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/">基于R语言的样本聚类-1</a>用R语言实现了基于聚类距离的聚类树的实现，最终的结果是得到基于某个表型（比如<strong>基因表达趋势变化</strong>）的分组，在同一个分支（一类）上的两个样本有更多的相似之处，上一期的最终效果如下图：</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703210751079-1625317673024.png" alt="image-20210703210751079" style="zoom:50%;"><p>而用于检测或发现样本间相似性的方法还有主成分分析法，相关性分析方法等。基于样本件的相关性，也可以将样本进行聚类。主成分分析的原理推荐一篇知乎文章<a href="https://zhuanlan.zhihu.com/p/99123384">前往学习</a>。今天，我们就利用R语言实现这一个分析过程并且可视化。</p><h2 id="2-R语言实现"><a href="#2-R语言实现" class="headerlink" title="2. R语言实现"></a>2. R语言实现</h2><h3 id="2-1-加载包及导入数据"><a href="#2-1-加载包及导入数据" class="headerlink" title="2.1 加载包及导入数据"></a>2.1 加载包及导入数据</h3><p>本次所用到的包<strong>ggcorrplot+openxlsx</strong>，不会安装包的<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">戳我学习</a>，里面有安装包的办法，这里就不多说了。</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">rm(list &#x3D; ls()) # 清空环境变量library(ggcorrplot) # 加载包library(openxlsx) # 加载包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-1-1导入数据"><a href="#2-1-1导入数据" class="headerlink" title="2.1.1导入数据"></a>2.1.1导入数据</h4><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">load(&#39;MydataforStringTie.Rdata&#39;) # 该数据是我的一个数据集，里面包含很多数据，你不必纠结他是干什么的含有什么的，你只需要知道你需要一个下面的“dat&quot;内容的数据框即可！dat&#x3D;GeneCounts # 赋值head(dat,6) # 查看数据框前6行，其实默认的也是6行names(dat) # 查看数据框的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据格式如下：</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212138520.png" alt="image-20210703212138520" style="zoom: 80%;"><h4 id="2-1-2-计算相关系数及其显著性"><a href="#2-1-2-计算相关系数及其显著性" class="headerlink" title="2.1.2 计算相关系数及其显著性"></a>2.1.2 计算相关系数及其显著性</h4><pre class="line-numbers language-b" data-language="b"><code class="language-b">corr&#x3D;round(cor(dat[,]),2) # Calculate the correlation coefficientp.mat&#x3D;cor_pmat(dat)# Calculate the significance of correlation coefficient<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>样本相关性结果如下：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212228561-1625318550132.png" alt="image-20210703212228561"></p><p>由于数据量的问题，我的数据没能检验相关额显著性，如下:</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212334088-1625318615478.png" alt="image-20210703212334088"></p><h3 id="2-2-结果可视化"><a href="#2-2-结果可视化" class="headerlink" title="2.2 结果可视化"></a>2.2 结果可视化</h3><p>准备好数据后，利用<strong>ggcorrplot</strong>函数可以对相关性的分析结果进行可视化，代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">ggcorrplot(corr,           method &#x3D; &#39;square&#39;,# 显示样式，“circle&quot;是第二张图的样子           hc.order &#x3D; TRUE, # 是否聚类           type &#x3D; &#39;lower&#39;, # 上下三角           outline.color &#x3D; &#39;gray60&#39;, # 框颜色           colors &#x3D; c(&#39;green&#39;,&#39;white&#39;,&#39;blue&#39;), # 图颜色           lab &#x3D; TRUE, # 是否显示数字           lab_col &#x3D; &#39;white&#39;, # 数字颜色           lab_size &#x3D; 3, # 数字大小           p.mat &#x3D; p.mat, # 填充           insig &#x3D; &#39;blank&#39;,# 显著的黑色填充           show.diag &#x3D; TRUE, # 只显示对角线一侧           digits &#x3D; 2 #小数保留位数           )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可视化结果如下，可以看得出来我的样本Q23是有些问题的，如果需要考虑离群值，这个样本可能是候选之一：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212606551.png" alt="image-20210703212606551"></p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703213100461-1625319061563.png" alt="image-20210703213100461"></p><p>由于这个分析基本都是在数据预处理的时候用，花里胡哨的那些我就懒得上了，如果喜欢花里胡哨的可以<a href="https://blog.csdn.net/kMD8d5R/article/details/89346052">去看这篇博文</a>。</p><p>好了，今天就更新到这儿，下一期我们更新基于PCA分析的样本聚类。</p><p>记得打赏哟，白嫖我来你家吃饭！</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 相关性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-1</title>
      <link href="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/"/>
      <url>/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-聚类和分类"><a href="#1-1-聚类和分类" class="headerlink" title="1.1 聚类和分类"></a>1.1 聚类和分类</h3><p>有人会觉得<strong>聚类</strong>就是<strong>分类</strong>，而其实在严格意义上，聚类与分类并不是一回事，两者有着很大的差异。</p><p>分类是按照已定的程序模式和标准进行判断划分，如<strong>男人</strong>和<strong>女人</strong>，在这里，你可以理解为这是<strong>分类/分组数据</strong>（注意了，不同的数据类型有不同的检验方法哟）。再比如，我们直接规定把数据的平均值作为中心轴，那么我们可以把这一组数据分为两个组别，即高于平均和等于平均的两个组，这也是分类。顺便扩展一下，我们后期会讲一期<strong>单基因GESA分析</strong>，用到的分组原理大概就是这个呢。<strong>因此，分类是按照固有或者某个标准将数据进行分组</strong>。</p><p>而聚类则分析，事先我们并不知道具体的划分标准，要靠算法进行判断数据之间的相似性，把相似的数据放在一起，也就是说聚类最关键的工作是：<em><strong>探索和挖掘数据中的潜在差异和联系</strong></em>。</p><p>在聚类的结论出来之前，我完全不知道每一类有什么特点，一定要根据聚类的结果通过人的经验来分析，看看聚成的这一类大概有什么特点。</p><h3 id="1-2-聚类的方法"><a href="#1-2-聚类的方法" class="headerlink" title="1.2 聚类的方法"></a>1.2 聚类的方法</h3><p>关于聚类的各种算法，推荐知乎的一篇文章<a href="https://zhuanlan.zhihu.com/p/104355127">点我学习，下例图片来源于知乎</a>。</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703122657356-1625286420689.png" alt="image-20210703122657356" style="zoom:50%;"><h2 id="2-聚类在R语言中的实现"><a href="#2-聚类在R语言中的实现" class="headerlink" title="2 聚类在R语言中的实现"></a>2 聚类在R语言中的实现</h2><h3 id="2-1-包的安装"><a href="#2-1-包的安装" class="headerlink" title="2.1 包的安装"></a>2.1 包的安装</h3><p>这里，我们首先用到两个包，第一个是<strong>WGCNA</strong>，第二个是<strong>openxlsx</strong>，加载它们：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Load the WGCNA packagelibrary(openxlsx) # 导入Excel数据library(WGCNA) # 画聚类图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果还没有安装这两个包，安装方法请移步我的另一篇博文<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">用R语言如何画一张漂亮的热图</a>。</p><h3 id="2-2-数据读入"><a href="#2-2-数据读入" class="headerlink" title="2.2 数据读入"></a>2.2 数据读入</h3><p>先上数据格式，见下图：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703151850922-1625296732671.png" alt="image-20210703151850922"></p><p>再上代码：</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">dat &lt;- read.xlsx(&quot;filename.xlsx&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将上述矩阵转置并转化为数据框</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">datExpr0 &#x3D; as.data.frame(t(dat[,]))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转置之后数据格式如下图，行名是样本名，列名是基因名：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703153427860-1625297669794.png" alt="image-20210703153427860"></p><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><p>如下就可以画图啦</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">sampleTree &#x3D; hclust(dist(datExpr0), method &#x3D; &quot;average&quot;) # 选择计算中心距方法sizeGrWindow(16,9) # 设置画图框的大小par(mar &#x3D; c(4,4,4,4)) # 设置边距，根据实际情况选择plot(sampleTree,      main &#x3D; &quot;Filemane&quot;,#图名字     sub&#x3D;&quot;&quot;, # 标题名字     xlab&#x3D;&quot;&quot;, # X轴名字     cex.lab &#x3D; 1.5, # X轴Y轴名字大小     cex.axis &#x3D; 1.5, #Y轴刻度大小大小     cex.main &#x3D; 1.5) #标题大小dev.off() # 关闭画图装置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述可以画的是聚类树，效果图如下：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703154332418-1625298214047.png" alt="image-20210703154332418"></p><p>下一期我们做样本间的各种相关图，期待与您下次再见~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to build a private blog</title>
      <link href="/2021/07/02/how-to-build-a-private-blog/"/>
      <url>/2021/07/02/how-to-build-a-private-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Software-install"><a href="#1-Software-install" class="headerlink" title="1 Software install"></a>1 Software install</h2><p>1.1 Nodejs,<a href="https://nodejs.org/dist/v14.17.1/node-v14.17.1-x64.msi">click here to download</a><br>1.2 Git,<a href="https://git-scm.com/downloads">click here to download</a></p><h2 id="2-Construct"><a href="#2-Construct" class="headerlink" title="2 Construct"></a>2 Construct</h2><h3 id="2-1-Run-in-“Git”"><a href="#2-1-Run-in-“Git”" class="headerlink" title="2.1 Run in “Git”"></a>2.1 Run in “Git”</h3><p>Check the version for node and npm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo node -v$ hexo npm -v$ npm install # 切换到自己博客的目录下并执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Install-the-“cnpm”-and-“hexo-cli”"><a href="#2-2-Install-the-“cnpm”-and-“hexo-cli”" class="headerlink" title="2.2 Install the “cnpm” and “hexo-cli”"></a>2.2 Install the “cnpm” and “hexo-cli”</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org$ hexo cnpm -v$ cnpm install -g hexo-cli$ hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-constract-a-local-service-for-“Myblog”"><a href="#2-3-constract-a-local-service-for-“Myblog”" class="headerlink" title="2.3 constract a local service for “Myblog”"></a>2.3 constract a local service for “Myblog”</h3><p>To construct and start a “Myblog”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mkdir Myblog$ cd Myblog$ hexo init #初始化自己的博客$ hexo s # 运行自己的博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Check “Myblog” in browser with the below address</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ http:&#x2F;&#x2F;localhost:4000&#x2F; #可以直接在浏览器中打开刚刚的博客<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Write a article</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo n filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To update the content for “Myblog”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>###2.4 Create a blog home based on Github</p><p>Fist,Create a new  respository “YourGithubName.github.io”</p><p>Second, install a “git” plugin</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm install --save hexo-deployer-git # 必须要安装该插件才可以部署到github<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Third, Configure the file “config.yml” in your dir for Myblog as followings</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>type: git<br>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>branch: master<br>Fourth, if your PC is Win10,you should execute these codes</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm install --save hexo-deployer-git # install deployer for uploading$ git config --global user.email xxx$ git config --global user.name xxx$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-beautify-your-blog-layout"><a href="#3-beautify-your-blog-layout" class="headerlink" title="3 beautify your blog layout"></a>3 beautify your blog layout</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia$ hexo c$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Note: you should modify the file “config.yml” as below:</p><p>theme: yilia</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> study </tag>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用R语言如何画一张漂亮的热图</title>
      <link href="/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/"/>
      <url>/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-清空环境变量及控制台"><a href="#1-清空环境变量及控制台" class="headerlink" title="1. 清空环境变量及控制台"></a>1. 清空环境变量及控制台</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rm(list &#x3D; ls())cat(&quot;\014&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-加载包"><a href="#2-加载包" class="headerlink" title="2. 加载包"></a>2. 加载包</h2><p>如果没有请自行下载，如果基础板安装不上，可以用bioconductor安装，<a href="http://bioconductor.org/install/">点我查看安装方法</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">library(tidyverse) #安装包library(openxlsx)library(pheatmap)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-导入数据"><a href="#3-导入数据" class="headerlink" title="3. 导入数据"></a>3. 导入数据</h2><p>这里需要根据自己的数据类型导入，我用的xlsx，所以导入的命令如下，当然，你们也可以用其他函数导入，只要是数据，都可以.这里，我们列是样本名，行名是基因名，不要弄错数据格式了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dat&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;41HubGenes_FPKM.xlsx&quot;,rowNames &#x3D; T)names(dat)HeatmapData&#x3D;dat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-构建列（样本）分组（注释-信息"><a href="#4-构建列（样本）分组（注释-信息" class="headerlink" title="4. 构建列（样本）分组（注释)信息"></a>4. 构建列（样本）分组（注释)信息</h2><p>在这里，矩阵行名是样本名称，列是分组信息，不要弄错了！同理，对基因的分组也是同样的构造办法！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">annotation_row1&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;coldata.xlsx&quot;,rowNames &#x3D; T)annotation_row&#x3D;annotation_row1[,-2] #根据你的数据选取，其他信息都不要annotation_row&#x3D;as.data.frame(annotation_row) #因为只有一列就是数组，所以需要强制转化一下数据类型rownames(annotation_row) &lt;- rownames(annotation_row1)colnames(annotation_row) &lt;- &quot;Sample&quot;annotation_col&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;coldata.xlsx&quot;,rowNames &#x3D; T,sheet &#x3D; 2) #保存与否自己决定save(annotation_col,annotation_row,file &#x3D; &quot;..&#x2F;code&#x2F;heatmap_annotation.Rdata&quot;) #保存与否自己决定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的路径是我自己的路径，你别无脑复制。基础操作不会的<a href="https://www.bilibili.com/video/BV19x411X7C6?from=search&seid=14665690512678618295">点我学习</a></p><h2 id="5-画图与保存"><a href="#5-画图与保存" class="headerlink" title="5. 画图与保存"></a>5. 画图与保存</h2><p>期刊所需要高清图片，参数res调整，里面的参数用法不会的可以“?函数名”即可知道，如“?pheatmap”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tiff(filename &#x3D; &quot;..&#x2F;MergeBasisForPaper&#x2F;Pictures&#x2F;filename.tiff&quot;,width &#x3D; 4,height &#x3D; 2,res &#x3D; 300, # 这是DPI，期刊一般要求300units &#x3D; &quot;in&quot;) # 这是图片长宽为英寸，还可以设置为“cm”par(oma&#x3D;c(3,3,3,3))par(mar&#x3D;c(6,6,4,3) + 0.1)pheatmap(t(HeatmapData),scale &#x3D; &#39;row&#39;, # 标准化行或者列取决于你的数据格式，比如列是sample1-sample5，行名是gene1-gene5,那么标准化就“row”,也就是说我们要看同一个基因在不同样本间的表达量，这样归一化做出来的图才有意义annotation_col &#x3D; annotation_col, # 注释文件annotation_row &#x3D; annotation_row, # 注释文件cluster_rows &#x3D; F, #聚类与否cluster_cols &#x3D; T, #聚类与否#cellwidth &#x3D; 10, #每个小格子的宽度#cellheight &#x3D; 10, #每个小格子的长度angle_col &#x3D; 315, # 横轴标签旋转角度#clustering_method &#x3D; &#39;average&#39;,# 聚类方法#cutree_rows &#x3D; 2, # 切分聚类数量#cutree_cols &#x3D; 5, # 切分聚类数量display_numbers &#x3D; F, # 是否显示数字fontsize_row &#x3D; 3, # 行数字大小fontsize_col &#x3D; 3, # 列数字大小fontsize &#x3D; 3, # 数字大小treeheight_col &#x3D; 5, # 聚类树高度main &#x3D; &quot;Heatmap For Hub Genes&quot;, # 起个名字legend_breaks&#x3D;NA, # 图例color &#x3D; c(&quot;green&quot;,&quot;red&quot;), #自定义颜色，但是这个自定义出来的效果可能没有默认的好treeheight_row &#x3D; 5, # 聚类树高度annotation_colors &#x3D; c(&quot;red&quot;,&quot;blue&quot;,&quot;black&quot;,&quot;yellow&quot;)# 注释的颜色)dev.off() # 关闭画图设备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-结束"><a href="#6-结束" class="headerlink" title="6. 结束"></a>6. 结束</h2><p>好了，这就是热图的做法，不懂的可以留言讨论<br>最后，贴一张效果图</p><p><img src="/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/image-20210702205555203-1625230557110.png" alt="image-20210702205555203"></p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组数据 </tag>
            
            <tag> R语言 </tag>
            
            <tag> 热图 </tag>
            
            <tag> 差异基因 </tag>
            
            <tag> 转录组数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
