<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于R语言的样本聚类-3</title>
      <link href="/2021/07/04/ji-yu-r-yu-yan-de-yang-ben-ju-lei-3/"/>
      <url>/2021/07/04/ji-yu-r-yu-yan-de-yang-ben-ju-lei-3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>上一期在文章<a href="https://chaoyuny.github.io/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/">基于R语言的样本聚类-1</a>和<a href="http://localhost:4000/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/">基于R语言的样本聚类-2</a>中分别提到了用于样本聚类（样本件相似性）的两种方法，分别是<strong>聚类树</strong>和<strong>相关性分析</strong>，本期我们将使用R语言作出基于PCA分析的样本聚类。</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> 主成分分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode连接远程服务器教程</title>
      <link href="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/"/>
      <url>/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载VSCode"><a href="#1-下载VSCode" class="headerlink" title="1. 下载VSCode"></a>1. 下载VSCode</h2><p>VSCode：<a href="https://code.visualstudio.com/docs/?dv=win">点我下载</a></p><p>安装OpenSSH</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">win+x #随后选择Windows PoweShell（管理员）Get-WindowsCapability -Online | ? Name -like &#39;OpenSSH*&#39;#如果未安装，则输入Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置远程服务器"><a href="#2-配置远程服务器" class="headerlink" title="2. 配置远程服务器"></a>2. 配置远程服务器</h2><h3 id="2-1-搜索并安装remote-development插件"><a href="#2-1-搜索并安装remote-development插件" class="headerlink" title="2.1 搜索并安装remote development插件"></a>2.1 搜索并安装remote development插件</h3><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703221512599-1625321714218.png" alt="image-20210703221512599"></p><h3 id="2-2-配置config文件"><a href="#2-2-配置config文件" class="headerlink" title="2.2 配置config文件"></a>2.2 配置config文件</h3><p>按照下图所示顺序，调出<em><strong>config</strong></em>配置文件；</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222054154-1625322055588.png" alt="image-20210703222054154"></p><p>修改或增加下列内容，Host名字徐亚自己起一个，Hostname就是服务器的地址，User是自己在服务器上的用户名。</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222218598-1625322140369.png" alt="image-20210703222218598"></p><p>配置完成后，在左侧可以看到我们的用户名，按照图示顺序，选择<em><strong>linux</strong></em>,如下图：</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222522950-1625322324487.png" alt="image-20210703222522950"></p><p>点击以后就出现下面输入账号密码的界面，输入后等待就好了</p><p><img src="/2021/07/03/vscode-lian-jie-yuan-cheng-fu-wu-qi-jiao-cheng/image-20210703222715094-1625322437153.png" alt="image-20210703222715094"></p><p>好了，这个东西只能说看你运气，可能笔记本不一样 ，  需要的支持插件不一样，如果上述不能解决你的问题，请联系我。</p>]]></content>
      
      
      <categories>
          
          <category> linux 专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> vscode </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-2</title>
      <link href="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/"/>
      <url>/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>上一期的文章<a href="https://chaoyuny.github.io/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/">基于R语言的样本聚类-1</a>用R语言实现了基于聚类距离的聚类树的实现，最终的结果是得到基于某个表型（比如<strong>基因表达趋势变化</strong>）的分组，在同一个分支（一类）上的两个样本有更多的相似之处，上一期的最终效果如下图：</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703210751079-1625317673024.png" alt="image-20210703210751079" style="zoom:50%;"><p>而用于检测或发现样本间相似性的方法还有主成分分析法，相关性分析方法等。基于样本件的相关性，也可以将样本进行聚类。主成分分析的原理推荐一篇知乎文章<a href="https://zhuanlan.zhihu.com/p/99123384">前往学习</a>。今天，我们就利用R语言实现这一个分析过程并且可视化。</p><h2 id="2-R语言实现"><a href="#2-R语言实现" class="headerlink" title="2. R语言实现"></a>2. R语言实现</h2><h3 id="2-1-加载包及导入数据"><a href="#2-1-加载包及导入数据" class="headerlink" title="2.1 加载包及导入数据"></a>2.1 加载包及导入数据</h3><p>本次所用到的包<strong>ggcorrplot+openxlsx</strong>，不会安装包的<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">戳我学习</a>，里面有安装包的办法，这里就不多说了。</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">rm(list &#x3D; ls()) # 清空环境变量library(ggcorrplot) # 加载包library(openxlsx) # 加载包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-1-1导入数据"><a href="#2-1-1导入数据" class="headerlink" title="2.1.1导入数据"></a>2.1.1导入数据</h4><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">load(&#39;MydataforStringTie.Rdata&#39;) # 该数据是我的一个数据集，里面包含很多数据，你不必纠结他是干什么的含有什么的，你只需要知道你需要一个下面的“dat&quot;内容的数据框即可！dat&#x3D;GeneCounts # 赋值head(dat,6) # 查看数据框前6行，其实默认的也是6行names(dat) # 查看数据框的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据格式如下：</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212138520.png" alt="image-20210703212138520" style="zoom: 80%;"><h4 id="2-1-2-计算相关系数及其显著性"><a href="#2-1-2-计算相关系数及其显著性" class="headerlink" title="2.1.2 计算相关系数及其显著性"></a>2.1.2 计算相关系数及其显著性</h4><pre class="line-numbers language-b" data-language="b"><code class="language-b">corr&#x3D;round(cor(dat[,]),2) # Calculate the correlation coefficientp.mat&#x3D;cor_pmat(dat)# Calculate the significance of correlation coefficient<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>样本相关性结果如下：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212228561-1625318550132.png" alt="image-20210703212228561"></p><p>由于数据量的问题，我的数据没能检验相关额显著性，如下:</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212334088-1625318615478.png" alt="image-20210703212334088"></p><h3 id="2-2-结果可视化"><a href="#2-2-结果可视化" class="headerlink" title="2.2 结果可视化"></a>2.2 结果可视化</h3><p>准备好数据后，利用<strong>ggcorrplot</strong>函数可以对相关性的分析结果进行可视化，代码如下：</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">ggcorrplot(corr,           method &#x3D; &#39;square&#39;,# 显示样式，“circle&quot;是第二张图的样子           hc.order &#x3D; TRUE, # 是否聚类           type &#x3D; &#39;lower&#39;, # 上下三角           outline.color &#x3D; &#39;gray60&#39;, # 框颜色           colors &#x3D; c(&#39;green&#39;,&#39;white&#39;,&#39;blue&#39;), # 图颜色           lab &#x3D; TRUE, # 是否显示数字           lab_col &#x3D; &#39;white&#39;, # 数字颜色           lab_size &#x3D; 3, # 数字大小           p.mat &#x3D; p.mat, # 填充           insig &#x3D; &#39;blank&#39;,# 显著的黑色填充           show.diag &#x3D; TRUE, # 只显示对角线一侧           digits &#x3D; 2 #小数保留位数           )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可视化结果如下，可以看得出来我的样本Q23是有些问题的，如果需要考虑离群值，这个样本可能是候选之一：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703212606551.png" alt="image-20210703212606551"></p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-2/image-20210703213100461-1625319061563.png" alt="image-20210703213100461"></p><p>由于这个分析基本都是在数据预处理的时候用，花里胡哨的那些我就懒得上了，如果喜欢花里胡哨的可以<a href="https://blog.csdn.net/kMD8d5R/article/details/89346052">去看这篇博文</a>。</p><p>好了，今天就更新到这儿，下一期我们更新基于PCA分析的样本聚类。</p><p>记得打赏哟，白嫖我来你家吃饭！</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> 相关性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于R语言的样本聚类-1</title>
      <link href="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/"/>
      <url>/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-聚类和分类"><a href="#1-1-聚类和分类" class="headerlink" title="1.1 聚类和分类"></a>1.1 聚类和分类</h3><p>有人会觉得<strong>聚类</strong>就是<strong>分类</strong>，而其实在严格意义上，聚类与分类并不是一回事，两者有着很大的差异。</p><p>分类是按照已定的程序模式和标准进行判断划分，如<strong>男人</strong>和<strong>女人</strong>，在这里，你可以理解为这是<strong>分类/分组数据</strong>（注意了，不同的数据类型有不同的检验方法哟）。再比如，我们直接规定把数据的平均值作为中心轴，那么我们可以把这一组数据分为两个组别，即高于平均和等于平均的两个组，这也是分类。顺便扩展一下，我们后期会讲一期<strong>单基因GESA分析</strong>，用到的分组原理大概就是这个呢。<strong>因此，分类是按照固有或者某个标准将数据进行分组</strong>。</p><p>而聚类则分析，事先我们并不知道具体的划分标准，要靠算法进行判断数据之间的相似性，把相似的数据放在一起，也就是说聚类最关键的工作是：<em><strong>探索和挖掘数据中的潜在差异和联系</strong></em>。</p><p>在聚类的结论出来之前，我完全不知道每一类有什么特点，一定要根据聚类的结果通过人的经验来分析，看看聚成的这一类大概有什么特点。</p><h3 id="1-2-聚类的方法"><a href="#1-2-聚类的方法" class="headerlink" title="1.2 聚类的方法"></a>1.2 聚类的方法</h3><p>关于聚类的各种算法，推荐知乎的一篇文章<a href="https://zhuanlan.zhihu.com/p/104355127">点我学习，下例图片来源于知乎</a>。</p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703122657356-1625286420689.png" alt="image-20210703122657356" style="zoom:50%;"><h2 id="2-聚类在R语言中的实现"><a href="#2-聚类在R语言中的实现" class="headerlink" title="2 聚类在R语言中的实现"></a>2 聚类在R语言中的实现</h2><h3 id="2-1-包的安装"><a href="#2-1-包的安装" class="headerlink" title="2.1 包的安装"></a>2.1 包的安装</h3><p>这里，我们首先用到两个包，第一个是<strong>WGCNA</strong>，第二个是<strong>openxlsx</strong>，加载它们：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Load the WGCNA packagelibrary(openxlsx) # 导入Excel数据library(WGCNA) # 画聚类图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果还没有安装这两个包，安装方法请移步我的另一篇博文<a href="https://chaoyuny.github.io/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/">用R语言如何画一张漂亮的热图</a>。</p><h3 id="2-2-数据读入"><a href="#2-2-数据读入" class="headerlink" title="2.2 数据读入"></a>2.2 数据读入</h3><p>先上数据格式，见下图：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703151850922-1625296732671.png" alt="image-20210703151850922"></p><p>再上代码：</p><pre class="line-numbers language-b" data-language="b"><code class="language-b">dat &lt;- read.xlsx(&quot;filename.xlsx&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将上述矩阵转置并转化为数据框</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">datExpr0 &#x3D; as.data.frame(t(dat[,]))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转置之后数据格式如下图，行名是样本名，列名是基因名：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703153427860-1625297669794.png" alt="image-20210703153427860"></p><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><p>如下就可以画图啦</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">sampleTree &#x3D; hclust(dist(datExpr0), method &#x3D; &quot;average&quot;) # 选择计算中心距方法sizeGrWindow(16,9) # 设置画图框的大小par(mar &#x3D; c(4,4,4,4)) # 设置边距，根据实际情况选择plot(sampleTree,      main &#x3D; &quot;Filemane&quot;,#图名字     sub&#x3D;&quot;&quot;, # 标题名字     xlab&#x3D;&quot;&quot;, # X轴名字     cex.lab &#x3D; 1.5, # X轴Y轴名字大小     cex.axis &#x3D; 1.5, #Y轴刻度大小大小     cex.main &#x3D; 1.5) #标题大小dev.off() # 关闭画图装置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述可以画的是聚类树，效果图如下：</p><p><img src="/2021/07/03/ji-yu-r-yu-yan-de-yang-ben-ju-lei-1/image-20210703154332418-1625298214047.png" alt="image-20210703154332418"></p><p>下一期我们做样本间的各种相关图，期待与您下次再见~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> 聚类分析 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 生物信息学 </tag>
            
            <tag> 转录组数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to build a private blog</title>
      <link href="/2021/07/02/how-to-build-a-private-blog/"/>
      <url>/2021/07/02/how-to-build-a-private-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Software-install"><a href="#1-Software-install" class="headerlink" title="1 Software install"></a>1 Software install</h2><p>1.1 Nodejs,<a href="https://nodejs.org/dist/v14.17.1/node-v14.17.1-x64.msi">click here to download</a><br>1.2 Git,<a href="https://git-scm.com/downloads">click here to download</a></p><h2 id="2-Construct"><a href="#2-Construct" class="headerlink" title="2 Construct"></a>2 Construct</h2><h3 id="2-1-Run-in-“Git”"><a href="#2-1-Run-in-“Git”" class="headerlink" title="2.1 Run in “Git”"></a>2.1 Run in “Git”</h3><p>Check the version for node and npm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo node -v$ hexo npm -v$ npm install # 切换到自己博客的目录下并执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Install-the-“cnpm”-and-“hexo-cli”"><a href="#2-2-Install-the-“cnpm”-and-“hexo-cli”" class="headerlink" title="2.2 Install the “cnpm” and “hexo-cli”"></a>2.2 Install the “cnpm” and “hexo-cli”</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npm install -g cnpm --registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org$ hexo cnpm -v$ cnpm install -g hexo-cli$ hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-constract-a-local-service-for-“Myblog”"><a href="#2-3-constract-a-local-service-for-“Myblog”" class="headerlink" title="2.3 constract a local service for “Myblog”"></a>2.3 constract a local service for “Myblog”</h3><p>To construct and start a “Myblog”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mkdir Myblog$ cd Myblog$ hexo init #初始化自己的博客$ hexo s # 运行自己的博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Check “Myblog” in browser with the below address</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ http:&#x2F;&#x2F;localhost:4000&#x2F; #可以直接在浏览器中打开刚刚的博客<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Write a article</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo n filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To update the content for “Myblog”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>###2.4 Create a blog home based on Github</p><p>Fist,Create a new  respository “YourGithubName.github.io”</p><p>Second, install a “git” plugin</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm install --save hexo-deployer-git # 必须要安装该插件才可以部署到github<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Third, Configure the file “config.yml” in your dir for Myblog as followings</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>type: git<br>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>branch: master<br>Fourth, if your PC is Win10,you should execute these codes</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm install --save hexo-deployer-git # install deployer for uploading$ git config --global user.email xxx$ git config --global user.name xxx$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-beautify-your-blog-layout"><a href="#3-beautify-your-blog-layout" class="headerlink" title="3 beautify your blog layout"></a>3 beautify your blog layout</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia$ hexo c$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Note: you should modify the file “config.yml” as below:</p><p>theme: yilia</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> study </tag>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用R语言如何画一张漂亮的热图</title>
      <link href="/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/"/>
      <url>/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-清空环境变量及控制台"><a href="#1-清空环境变量及控制台" class="headerlink" title="1. 清空环境变量及控制台"></a>1. 清空环境变量及控制台</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rm(list &#x3D; ls())cat(&quot;\014&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-加载包"><a href="#2-加载包" class="headerlink" title="2. 加载包"></a>2. 加载包</h2><p>如果没有请自行下载，如果基础板安装不上，可以用bioconductor安装，<a href="http://bioconductor.org/install/">点我查看安装方法</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">library(tidyverse) #安装包library(openxlsx)library(pheatmap)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-导入数据"><a href="#3-导入数据" class="headerlink" title="3. 导入数据"></a>3. 导入数据</h2><p>这里需要根据自己的数据类型导入，我用的xlsx，所以导入的命令如下，当然，你们也可以用其他函数导入，只要是数据，都可以.这里，我们列是样本名，行名是基因名，不要弄错数据格式了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dat&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;41HubGenes_FPKM.xlsx&quot;,rowNames &#x3D; T)names(dat)HeatmapData&#x3D;dat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-构建列（样本）分组（注释-信息"><a href="#4-构建列（样本）分组（注释-信息" class="headerlink" title="4. 构建列（样本）分组（注释)信息"></a>4. 构建列（样本）分组（注释)信息</h2><p>在这里，矩阵行名是样本名称，列是分组信息，不要弄错了！同理，对基因的分组也是同样的构造办法！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">annotation_row1&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;coldata.xlsx&quot;,rowNames &#x3D; T)annotation_row&#x3D;annotation_row1[,-2] #根据你的数据选取，其他信息都不要annotation_row&#x3D;as.data.frame(annotation_row) #因为只有一列就是数组，所以需要强制转化一下数据类型rownames(annotation_row) &lt;- rownames(annotation_row1)colnames(annotation_row) &lt;- &quot;Sample&quot;annotation_col&#x3D;read.xlsx(&quot;..&#x2F;MergeBasisForPaper&#x2F;coldata.xlsx&quot;,rowNames &#x3D; T,sheet &#x3D; 2) #保存与否自己决定save(annotation_col,annotation_row,file &#x3D; &quot;..&#x2F;code&#x2F;heatmap_annotation.Rdata&quot;) #保存与否自己决定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的路径是我自己的路径，你别无脑复制。基础操作不会的<a href="https://www.bilibili.com/video/BV19x411X7C6?from=search&seid=14665690512678618295">点我学习</a></p><h2 id="5-画图与保存"><a href="#5-画图与保存" class="headerlink" title="5. 画图与保存"></a>5. 画图与保存</h2><p>期刊所需要高清图片，参数res调整，里面的参数用法不会的可以“?函数名”即可知道，如“?pheatmap”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tiff(filename &#x3D; &quot;..&#x2F;MergeBasisForPaper&#x2F;Pictures&#x2F;filename.tiff&quot;,width &#x3D; 4,height &#x3D; 2,res &#x3D; 300, # 这是DPI，期刊一般要求300units &#x3D; &quot;in&quot;) # 这是图片长宽为英寸，还可以设置为“cm”par(oma&#x3D;c(3,3,3,3))par(mar&#x3D;c(6,6,4,3) + 0.1)pheatmap(t(HeatmapData),scale &#x3D; &#39;row&#39;, # 标准化行或者列取决于你的数据格式，比如列是sample1-sample5，行名是gene1-gene5,那么标准化就“row”,也就是说我们要看同一个基因在不同样本间的表达量，这样归一化做出来的图才有意义annotation_col &#x3D; annotation_col, # 注释文件annotation_row &#x3D; annotation_row, # 注释文件cluster_rows &#x3D; F, #聚类与否cluster_cols &#x3D; T, #聚类与否#cellwidth &#x3D; 10, #每个小格子的宽度#cellheight &#x3D; 10, #每个小格子的长度angle_col &#x3D; 315, # 横轴标签旋转角度#clustering_method &#x3D; &#39;average&#39;,# 聚类方法#cutree_rows &#x3D; 2, # 切分聚类数量#cutree_cols &#x3D; 5, # 切分聚类数量display_numbers &#x3D; F, # 是否显示数字fontsize_row &#x3D; 3, # 行数字大小fontsize_col &#x3D; 3, # 列数字大小fontsize &#x3D; 3, # 数字大小treeheight_col &#x3D; 5, # 聚类树高度main &#x3D; &quot;Heatmap For Hub Genes&quot;, # 起个名字legend_breaks&#x3D;NA, # 图例color &#x3D; c(&quot;green&quot;,&quot;red&quot;), #自定义颜色，但是这个自定义出来的效果可能没有默认的好treeheight_row &#x3D; 5, # 聚类树高度annotation_colors &#x3D; c(&quot;red&quot;,&quot;blue&quot;,&quot;black&quot;,&quot;yellow&quot;)# 注释的颜色)dev.off() # 关闭画图设备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-结束"><a href="#6-结束" class="headerlink" title="6. 结束"></a>6. 结束</h2><p>好了，这就是热图的做法，不懂的可以留言讨论<br>最后，贴一张效果图</p><p><img src="/2021/06/29/ru-he-hui-zhi-piao-liang-re-tu/image-20210702205555203-1625230557110.png" alt="image-20210702205555203"></p>]]></content>
      
      
      <categories>
          
          <category> R语言专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R语言 </tag>
            
            <tag> 转录组数据 </tag>
            
            <tag> 热图 </tag>
            
            <tag> 差异基因 </tag>
            
            <tag> 转录组数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
